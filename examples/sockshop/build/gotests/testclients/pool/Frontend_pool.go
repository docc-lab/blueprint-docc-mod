// This file is auto-generated by the Blueprint clientpool plugin
package pool

import (
	"context"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/golang"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/user"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/cart"
	"fmt"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/clientpool"
	"blueprint/testclients/ot"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/order"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/catalogue"
)

type Frontend_OTClientWrapperInterface_ClientPool struct {
	clients *clientpool.ClientPool[ot.Frontend_OTClientWrapperInterface]
}

func New_Frontend_Pool(parent *golang.Namespace) *Frontend_OTClientWrapperInterface_ClientPool {
	i := 0
	createClient := func() (ot.Frontend_OTClientWrapperInterface, error) {
		clientName := fmt.Sprintf("frontend.clientpool.%v", i)
		n, err := New_Frontend_PoolClient(clientName).BuildWithParent(parent)
		if err != nil {
			return nil, err
		}
		i++
		var client ot.Frontend_OTClientWrapperInterface
		err = n.Get("frontend.client.ot", &client)
		return client, err
	}
	clients := clientpool.NewClientPool(10, createClient)
	return &Frontend_OTClientWrapperInterface_ClientPool{clients: clients}
}


func (pool *Frontend_OTClientWrapperInterface_ClientPool) AddItem(ctx context.Context, sessionID string, itemID string) (ret0 string, err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.AddItem(ctx, sessionID, itemID)
}

func (pool *Frontend_OTClientWrapperInterface_ClientPool) DeleteCart(ctx context.Context, sessionID string) (err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.DeleteCart(ctx, sessionID)
}

func (pool *Frontend_OTClientWrapperInterface_ClientPool) GetAddress(ctx context.Context, addressID string) (ret0 user.Address, err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.GetAddress(ctx, addressID)
}

func (pool *Frontend_OTClientWrapperInterface_ClientPool) GetCard(ctx context.Context, cardID string) (ret0 user.Card, err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.GetCard(ctx, cardID)
}

func (pool *Frontend_OTClientWrapperInterface_ClientPool) GetCart(ctx context.Context, sessionID string) (ret0 []cart.Item, err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.GetCart(ctx, sessionID)
}

func (pool *Frontend_OTClientWrapperInterface_ClientPool) GetOrder(ctx context.Context, orderID string) (ret0 order.Order, err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.GetOrder(ctx, orderID)
}

func (pool *Frontend_OTClientWrapperInterface_ClientPool) GetOrders(ctx context.Context, userID string) (ret0 []order.Order, err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.GetOrders(ctx, userID)
}

func (pool *Frontend_OTClientWrapperInterface_ClientPool) GetSock(ctx context.Context, itemID string) (ret0 catalogue.Sock, err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.GetSock(ctx, itemID)
}

func (pool *Frontend_OTClientWrapperInterface_ClientPool) GetUser(ctx context.Context, userID string) (ret0 user.User, err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.GetUser(ctx, userID)
}

func (pool *Frontend_OTClientWrapperInterface_ClientPool) ListItems(ctx context.Context, tags []string, order string, pageNum int, pageSize int) (ret0 []catalogue.Sock, err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.ListItems(ctx, tags, order, pageNum, pageSize)
}

func (pool *Frontend_OTClientWrapperInterface_ClientPool) ListTags(ctx context.Context) (ret0 []string, err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.ListTags(ctx)
}

func (pool *Frontend_OTClientWrapperInterface_ClientPool) LoadCatalogue(ctx context.Context) (ret0 string, err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.LoadCatalogue(ctx)
}

func (pool *Frontend_OTClientWrapperInterface_ClientPool) Login(ctx context.Context, sessionID string, username string, password string) (ret0 string, ret1 user.User, err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.Login(ctx, sessionID, username, password)
}

func (pool *Frontend_OTClientWrapperInterface_ClientPool) NewOrder(ctx context.Context, userID string, addressID string, cardID string, cartID string) (ret0 order.Order, err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.NewOrder(ctx, userID, addressID, cardID, cartID)
}

func (pool *Frontend_OTClientWrapperInterface_ClientPool) PostAddress(ctx context.Context, userID string, address user.Address) (ret0 string, err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.PostAddress(ctx, userID, address)
}

func (pool *Frontend_OTClientWrapperInterface_ClientPool) PostCard(ctx context.Context, userID string, card user.Card) (ret0 string, err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.PostCard(ctx, userID, card)
}

func (pool *Frontend_OTClientWrapperInterface_ClientPool) Register(ctx context.Context, sessionID string, username string, password string, email string, first string, last string) (ret0 string, err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.Register(ctx, sessionID, username, password, email, first, last)
}

func (pool *Frontend_OTClientWrapperInterface_ClientPool) RemoveItem(ctx context.Context, sessionID string, itemID string) (err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.RemoveItem(ctx, sessionID, itemID)
}

func (pool *Frontend_OTClientWrapperInterface_ClientPool) UpdateItem(ctx context.Context, sessionID string, itemID string, quantity int) (ret0 string, err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.UpdateItem(ctx, sessionID, itemID, quantity)
}



