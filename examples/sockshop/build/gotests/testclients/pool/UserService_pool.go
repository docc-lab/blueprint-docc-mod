// This file is auto-generated by the Blueprint clientpool plugin
package pool

import (
	"context"
	"fmt"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/clientpool"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/golang"
	"blueprint/testclients/ot"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/user"
)

type UserService_OTClientWrapperInterface_ClientPool struct {
	clients *clientpool.ClientPool[ot.UserService_OTClientWrapperInterface]
}

func New_UserService_Pool(parent *golang.Namespace) *UserService_OTClientWrapperInterface_ClientPool {
	i := 0
	createClient := func() (ot.UserService_OTClientWrapperInterface, error) {
		clientName := fmt.Sprintf("user_service.clientpool.%v", i)
		n, err := New_UserService_PoolClient(clientName).BuildWithParent(parent)
		if err != nil {
			return nil, err
		}
		i++
		var client ot.UserService_OTClientWrapperInterface
		err = n.Get("user_service.client.ot", &client)
		return client, err
	}
	clients := clientpool.NewClientPool(10, createClient)
	return &UserService_OTClientWrapperInterface_ClientPool{clients: clients}
}


func (pool *UserService_OTClientWrapperInterface_ClientPool) Delete(ctx context.Context, entity string, id string) (err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.Delete(ctx, entity, id)
}

func (pool *UserService_OTClientWrapperInterface_ClientPool) GetAddresses(ctx context.Context, id string) (ret0 []user.Address, err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.GetAddresses(ctx, id)
}

func (pool *UserService_OTClientWrapperInterface_ClientPool) GetCards(ctx context.Context, cardid string) (ret0 []user.Card, err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.GetCards(ctx, cardid)
}

func (pool *UserService_OTClientWrapperInterface_ClientPool) GetUsers(ctx context.Context, id string) (ret0 []user.User, err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.GetUsers(ctx, id)
}

func (pool *UserService_OTClientWrapperInterface_ClientPool) Login(ctx context.Context, username string, password string) (ret0 user.User, err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.Login(ctx, username, password)
}

func (pool *UserService_OTClientWrapperInterface_ClientPool) PostAddress(ctx context.Context, userid string, address user.Address) (ret0 string, err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.PostAddress(ctx, userid, address)
}

func (pool *UserService_OTClientWrapperInterface_ClientPool) PostCard(ctx context.Context, userid string, card user.Card) (ret0 string, err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.PostCard(ctx, userid, card)
}

func (pool *UserService_OTClientWrapperInterface_ClientPool) PostUser(ctx context.Context, user user.User) (ret0 string, err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.PostUser(ctx, user)
}

func (pool *UserService_OTClientWrapperInterface_ClientPool) Register(ctx context.Context, username string, password string, email string, first string, last string) (ret0 string, err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.Register(ctx, username, password, email, first, last)
}



