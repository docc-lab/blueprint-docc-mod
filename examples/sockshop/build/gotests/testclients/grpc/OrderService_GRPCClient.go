// Blueprint: Auto-generated by GRPC Plugin
package grpc

import (
	"context"
	"time"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
	"blueprint/testclients/ot"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/order"
)

type OrderService_GRPCClient struct {
	ot.OrderService_OTServerWrapperInterface
	Client OrderService_OTServerWrapperInterfaceClient // The actual GRPC-generated client
	Timeout time.Duration
}

func New_OrderService_GRPCClient(ctx context.Context, serverAddress string) (*OrderService_GRPCClient, error) {
	var opts []grpc.DialOption
	opts = append(opts, grpc.WithTransportCredentials(insecure.NewCredentials()))
	duration, err := time.ParseDuration("1s")
	if err != nil {
		return nil, err
	}
	opts = append(opts, grpc.WithTimeout(duration))
	conn, err := grpc.Dial(serverAddress, opts...)
	if err != nil {
		return nil, err
	}

	c := &OrderService_GRPCClient{}
	c.Client = NewOrderService_OTServerWrapperInterfaceClient(conn)
	c.Timeout = duration
	return c, nil
}


func (client *OrderService_GRPCClient) GetOrder(ctx context.Context, orderID string, traceCtx string) (ret0 order.Order, err error) {
	// Create and marshall the GRPC Request object
	req := &OrderService_OTServerWrapperInterface_GetOrder_Request{}
	req.marshall(orderID, traceCtx)

	// Configure the client-side request timeout
	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	// Make the remote call
	rsp, err := client.Client.GetOrder(ctx, req)
	if err == nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}

	ret0 =  rsp.unmarshall()
	return
}

func (client *OrderService_GRPCClient) GetOrders(ctx context.Context, customerID string, traceCtx string) (ret0 []order.Order, err error) {
	// Create and marshall the GRPC Request object
	req := &OrderService_OTServerWrapperInterface_GetOrders_Request{}
	req.marshall(customerID, traceCtx)

	// Configure the client-side request timeout
	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	// Make the remote call
	rsp, err := client.Client.GetOrders(ctx, req)
	if err == nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}

	ret0 =  rsp.unmarshall()
	return
}

func (client *OrderService_GRPCClient) NewOrder(ctx context.Context, customerID string, addressID string, cardID string, cartID string, traceCtx string) (ret0 order.Order, err error) {
	// Create and marshall the GRPC Request object
	req := &OrderService_OTServerWrapperInterface_NewOrder_Request{}
	req.marshall(customerID, addressID, cardID, cartID, traceCtx)

	// Configure the client-side request timeout
	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	// Make the remote call
	rsp, err := client.Client.NewOrder(ctx, req)
	if err == nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}

	ret0 =  rsp.unmarshall()
	return
}

