// Blueprint: Auto-generated by Retries Plugin
package retries

import (
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/catalogue"
	"context"
	"blueprint/testclients/ot"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/user"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/cart"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/order"
)

type Frontend_RetrierClient struct {
	Client ot.Frontend_OTClientWrapperInterface
	MaxTries int
}

func New_Frontend_RetrierClient (ctx context.Context, client ot.Frontend_OTClientWrapperInterface) (*Frontend_RetrierClient, error) {
	handler := &Frontend_RetrierClient{}
	handler.Client = client
	handler.MaxTries = 3
	return handler, nil
}


func (client *Frontend_RetrierClient) AddItem(ctx context.Context, sessionID string, itemID string) (ret0 string, err error) {
	for i := 0; i < client.MaxTries; i++ {
		ret0, err = client.Client.AddItem(ctx, sessionID, itemID)
		if err == nil {
			return
		}
	}
	return
}

func (client *Frontend_RetrierClient) DeleteCart(ctx context.Context, sessionID string) (err error) {
	for i := 0; i < client.MaxTries; i++ {
		err = client.Client.DeleteCart(ctx, sessionID)
		if err == nil {
			return
		}
	}
	return
}

func (client *Frontend_RetrierClient) GetAddress(ctx context.Context, addressID string) (ret0 user.Address, err error) {
	for i := 0; i < client.MaxTries; i++ {
		ret0, err = client.Client.GetAddress(ctx, addressID)
		if err == nil {
			return
		}
	}
	return
}

func (client *Frontend_RetrierClient) GetCard(ctx context.Context, cardID string) (ret0 user.Card, err error) {
	for i := 0; i < client.MaxTries; i++ {
		ret0, err = client.Client.GetCard(ctx, cardID)
		if err == nil {
			return
		}
	}
	return
}

func (client *Frontend_RetrierClient) GetCart(ctx context.Context, sessionID string) (ret0 []cart.Item, err error) {
	for i := 0; i < client.MaxTries; i++ {
		ret0, err = client.Client.GetCart(ctx, sessionID)
		if err == nil {
			return
		}
	}
	return
}

func (client *Frontend_RetrierClient) GetOrder(ctx context.Context, orderID string) (ret0 order.Order, err error) {
	for i := 0; i < client.MaxTries; i++ {
		ret0, err = client.Client.GetOrder(ctx, orderID)
		if err == nil {
			return
		}
	}
	return
}

func (client *Frontend_RetrierClient) GetOrders(ctx context.Context, userID string) (ret0 []order.Order, err error) {
	for i := 0; i < client.MaxTries; i++ {
		ret0, err = client.Client.GetOrders(ctx, userID)
		if err == nil {
			return
		}
	}
	return
}

func (client *Frontend_RetrierClient) GetSock(ctx context.Context, itemID string) (ret0 catalogue.Sock, err error) {
	for i := 0; i < client.MaxTries; i++ {
		ret0, err = client.Client.GetSock(ctx, itemID)
		if err == nil {
			return
		}
	}
	return
}

func (client *Frontend_RetrierClient) GetUser(ctx context.Context, userID string) (ret0 user.User, err error) {
	for i := 0; i < client.MaxTries; i++ {
		ret0, err = client.Client.GetUser(ctx, userID)
		if err == nil {
			return
		}
	}
	return
}

func (client *Frontend_RetrierClient) ListItems(ctx context.Context, tags []string, order string, pageNum int, pageSize int) (ret0 []catalogue.Sock, err error) {
	for i := 0; i < client.MaxTries; i++ {
		ret0, err = client.Client.ListItems(ctx, tags, order, pageNum, pageSize)
		if err == nil {
			return
		}
	}
	return
}

func (client *Frontend_RetrierClient) ListTags(ctx context.Context) (ret0 []string, err error) {
	for i := 0; i < client.MaxTries; i++ {
		ret0, err = client.Client.ListTags(ctx)
		if err == nil {
			return
		}
	}
	return
}

func (client *Frontend_RetrierClient) LoadCatalogue(ctx context.Context) (ret0 string, err error) {
	for i := 0; i < client.MaxTries; i++ {
		ret0, err = client.Client.LoadCatalogue(ctx)
		if err == nil {
			return
		}
	}
	return
}

func (client *Frontend_RetrierClient) Login(ctx context.Context, sessionID string, username string, password string) (ret0 string, ret1 user.User, err error) {
	for i := 0; i < client.MaxTries; i++ {
		ret0, ret1, err = client.Client.Login(ctx, sessionID, username, password)
		if err == nil {
			return
		}
	}
	return
}

func (client *Frontend_RetrierClient) NewOrder(ctx context.Context, userID string, addressID string, cardID string, cartID string) (ret0 order.Order, err error) {
	for i := 0; i < client.MaxTries; i++ {
		ret0, err = client.Client.NewOrder(ctx, userID, addressID, cardID, cartID)
		if err == nil {
			return
		}
	}
	return
}

func (client *Frontend_RetrierClient) PostAddress(ctx context.Context, userID string, address user.Address) (ret0 string, err error) {
	for i := 0; i < client.MaxTries; i++ {
		ret0, err = client.Client.PostAddress(ctx, userID, address)
		if err == nil {
			return
		}
	}
	return
}

func (client *Frontend_RetrierClient) PostCard(ctx context.Context, userID string, card user.Card) (ret0 string, err error) {
	for i := 0; i < client.MaxTries; i++ {
		ret0, err = client.Client.PostCard(ctx, userID, card)
		if err == nil {
			return
		}
	}
	return
}

func (client *Frontend_RetrierClient) Register(ctx context.Context, sessionID string, username string, password string, email string, first string, last string) (ret0 string, err error) {
	for i := 0; i < client.MaxTries; i++ {
		ret0, err = client.Client.Register(ctx, sessionID, username, password, email, first, last)
		if err == nil {
			return
		}
	}
	return
}

func (client *Frontend_RetrierClient) RemoveItem(ctx context.Context, sessionID string, itemID string) (err error) {
	for i := 0; i < client.MaxTries; i++ {
		err = client.Client.RemoveItem(ctx, sessionID, itemID)
		if err == nil {
			return
		}
	}
	return
}

func (client *Frontend_RetrierClient) UpdateItem(ctx context.Context, sessionID string, itemID string, quantity int) (ret0 string, err error) {
	for i := 0; i < client.MaxTries; i++ {
		ret0, err = client.Client.UpdateItem(ctx, sessionID, itemID, quantity)
		if err == nil {
			return
		}
	}
	return
}

