// Blueprint: Auto-generated by OT Plugin
package ot

import (
	"github.com/blueprint-uservices/blueprint/runtime/core/backend"
	"context"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/shipping"
)

type ShippingService_OTClientWrapperInterface interface {
	GetShipment(ctx context.Context, id string) (shipping.Shipment, error)
	PostShipping(ctx context.Context, shipment shipping.Shipment) (shipping.Shipment, error)
	UpdateStatus(ctx context.Context, id string, status string) (error)
	
}

type ShippingService_OTClientWrapper struct {
	Client ShippingService_OTServerWrapperInterface
	CollClient backend.Tracer
}

func New_ShippingService_OTClientWrapper(ctx context.Context, client ShippingService_OTServerWrapperInterface, coll_client backend.Tracer) (*ShippingService_OTClientWrapper, error) {
	handler := &ShippingService_OTClientWrapper{}
	handler.Client = client
	handler.CollClient = coll_client
	return handler, nil
}


func (handler *ShippingService_OTClientWrapper) GetShipment(ctx context.Context, id string) (ret0 shipping.Shipment, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("ShippingService_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "ShippingServiceClient_GetShipment")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.GetShipment(ctx, id, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *ShippingService_OTClientWrapper) PostShipping(ctx context.Context, shipment shipping.Shipment) (ret0 shipping.Shipment, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("ShippingService_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "ShippingServiceClient_PostShipping")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.PostShipping(ctx, shipment, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *ShippingService_OTClientWrapper) UpdateStatus(ctx context.Context, id string, status string) (err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("ShippingService_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "ShippingServiceClient_UpdateStatus")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	err = handler.Client.UpdateStatus(ctx, id, status, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

