// Blueprint: Auto-generated by OT Plugin
package ot

import (
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/user"
	"github.com/blueprint-uservices/blueprint/runtime/core/backend"
	"context"
)

type UserService_OTClientWrapperInterface interface {
	Delete(ctx context.Context, entity string, id string) (error)
	GetAddresses(ctx context.Context, id string) ([]user.Address, error)
	GetCards(ctx context.Context, cardid string) ([]user.Card, error)
	GetUsers(ctx context.Context, id string) ([]user.User, error)
	Login(ctx context.Context, username string, password string) (user.User, error)
	PostAddress(ctx context.Context, userid string, address user.Address) (string, error)
	PostCard(ctx context.Context, userid string, card user.Card) (string, error)
	PostUser(ctx context.Context, user user.User) (string, error)
	Register(ctx context.Context, username string, password string, email string, first string, last string) (string, error)
	
}

type UserService_OTClientWrapper struct {
	Client UserService_OTServerWrapperInterface
	CollClient backend.Tracer
}

func New_UserService_OTClientWrapper(ctx context.Context, client UserService_OTServerWrapperInterface, coll_client backend.Tracer) (*UserService_OTClientWrapper, error) {
	handler := &UserService_OTClientWrapper{}
	handler.Client = client
	handler.CollClient = coll_client
	return handler, nil
}


func (handler *UserService_OTClientWrapper) Delete(ctx context.Context, entity string, id string) (err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("UserService_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "UserServiceClient_Delete")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	err = handler.Client.Delete(ctx, entity, id, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *UserService_OTClientWrapper) GetAddresses(ctx context.Context, id string) (ret0 []user.Address, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("UserService_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "UserServiceClient_GetAddresses")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.GetAddresses(ctx, id, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *UserService_OTClientWrapper) GetCards(ctx context.Context, cardid string) (ret0 []user.Card, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("UserService_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "UserServiceClient_GetCards")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.GetCards(ctx, cardid, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *UserService_OTClientWrapper) GetUsers(ctx context.Context, id string) (ret0 []user.User, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("UserService_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "UserServiceClient_GetUsers")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.GetUsers(ctx, id, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *UserService_OTClientWrapper) Login(ctx context.Context, username string, password string) (ret0 user.User, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("UserService_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "UserServiceClient_Login")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.Login(ctx, username, password, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *UserService_OTClientWrapper) PostAddress(ctx context.Context, userid string, address user.Address) (ret0 string, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("UserService_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "UserServiceClient_PostAddress")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.PostAddress(ctx, userid, address, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *UserService_OTClientWrapper) PostCard(ctx context.Context, userid string, card user.Card) (ret0 string, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("UserService_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "UserServiceClient_PostCard")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.PostCard(ctx, userid, card, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *UserService_OTClientWrapper) PostUser(ctx context.Context, user user.User) (ret0 string, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("UserService_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "UserServiceClient_PostUser")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.PostUser(ctx, user, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *UserService_OTClientWrapper) Register(ctx context.Context, username string, password string, email string, first string, last string) (ret0 string, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("UserService_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "UserServiceClient_Register")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.Register(ctx, username, password, email, first, last, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

