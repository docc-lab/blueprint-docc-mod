// Blueprint: Auto-generated by OT Plugin
package ot

import (
	"context"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/catalogue"
	"github.com/blueprint-uservices/blueprint/runtime/core/backend"
)

type CatalogueService_OTClientWrapperInterface interface {
	AddSock(ctx context.Context, sock catalogue.Sock) (string, error)
	AddTags(ctx context.Context, tags []string) (error)
	Count(ctx context.Context, tags []string) (int, error)
	DeleteSock(ctx context.Context, id string) (error)
	Get(ctx context.Context, id string) (catalogue.Sock, error)
	List(ctx context.Context, tags []string, order string, pageNum int, pageSize int) ([]catalogue.Sock, error)
	Tags(ctx context.Context) ([]string, error)
	
}

type CatalogueService_OTClientWrapper struct {
	Client CatalogueService_OTServerWrapperInterface
	CollClient backend.Tracer
}

func New_CatalogueService_OTClientWrapper(ctx context.Context, client CatalogueService_OTServerWrapperInterface, coll_client backend.Tracer) (*CatalogueService_OTClientWrapper, error) {
	handler := &CatalogueService_OTClientWrapper{}
	handler.Client = client
	handler.CollClient = coll_client
	return handler, nil
}


func (handler *CatalogueService_OTClientWrapper) AddSock(ctx context.Context, sock catalogue.Sock) (ret0 string, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("CatalogueService_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "CatalogueServiceClient_AddSock")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.AddSock(ctx, sock, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *CatalogueService_OTClientWrapper) AddTags(ctx context.Context, tags []string) (err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("CatalogueService_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "CatalogueServiceClient_AddTags")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	err = handler.Client.AddTags(ctx, tags, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *CatalogueService_OTClientWrapper) Count(ctx context.Context, tags []string) (ret0 int, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("CatalogueService_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "CatalogueServiceClient_Count")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.Count(ctx, tags, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *CatalogueService_OTClientWrapper) DeleteSock(ctx context.Context, id string) (err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("CatalogueService_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "CatalogueServiceClient_DeleteSock")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	err = handler.Client.DeleteSock(ctx, id, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *CatalogueService_OTClientWrapper) Get(ctx context.Context, id string) (ret0 catalogue.Sock, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("CatalogueService_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "CatalogueServiceClient_Get")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.Get(ctx, id, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *CatalogueService_OTClientWrapper) List(ctx context.Context, tags []string, order string, pageNum int, pageSize int) (ret0 []catalogue.Sock, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("CatalogueService_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "CatalogueServiceClient_List")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.List(ctx, tags, order, pageNum, pageSize, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *CatalogueService_OTClientWrapper) Tags(ctx context.Context) (ret0 []string, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("CatalogueService_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "CatalogueServiceClient_Tags")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.Tags(ctx, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

