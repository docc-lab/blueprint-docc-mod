// Blueprint: Auto-generated by OT Plugin
package ot

import (
	"context"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/cart"
	"github.com/blueprint-uservices/blueprint/runtime/core/backend"
)

type CartService_OTClientWrapperInterface interface {
	AddItem(ctx context.Context, customerID string, item cart.Item) (cart.Item, error)
	DeleteCart(ctx context.Context, customerID string) (error)
	GetCart(ctx context.Context, customerID string) ([]cart.Item, error)
	GetItem(ctx context.Context, customerID string, itemID string) (cart.Item, error)
	MergeCarts(ctx context.Context, customerID string, sessionID string) (error)
	RemoveItem(ctx context.Context, customerID string, itemID string) (error)
	UpdateItem(ctx context.Context, customerID string, item cart.Item) (error)
	
}

type CartService_OTClientWrapper struct {
	Client CartService_OTServerWrapperInterface
	CollClient backend.Tracer
}

func New_CartService_OTClientWrapper(ctx context.Context, client CartService_OTServerWrapperInterface, coll_client backend.Tracer) (*CartService_OTClientWrapper, error) {
	handler := &CartService_OTClientWrapper{}
	handler.Client = client
	handler.CollClient = coll_client
	return handler, nil
}


func (handler *CartService_OTClientWrapper) AddItem(ctx context.Context, customerID string, item cart.Item) (ret0 cart.Item, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("CartService_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "CartServiceClient_AddItem")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.AddItem(ctx, customerID, item, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *CartService_OTClientWrapper) DeleteCart(ctx context.Context, customerID string) (err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("CartService_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "CartServiceClient_DeleteCart")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	err = handler.Client.DeleteCart(ctx, customerID, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *CartService_OTClientWrapper) GetCart(ctx context.Context, customerID string) (ret0 []cart.Item, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("CartService_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "CartServiceClient_GetCart")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.GetCart(ctx, customerID, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *CartService_OTClientWrapper) GetItem(ctx context.Context, customerID string, itemID string) (ret0 cart.Item, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("CartService_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "CartServiceClient_GetItem")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.GetItem(ctx, customerID, itemID, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *CartService_OTClientWrapper) MergeCarts(ctx context.Context, customerID string, sessionID string) (err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("CartService_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "CartServiceClient_MergeCarts")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	err = handler.Client.MergeCarts(ctx, customerID, sessionID, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *CartService_OTClientWrapper) RemoveItem(ctx context.Context, customerID string, itemID string) (err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("CartService_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "CartServiceClient_RemoveItem")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	err = handler.Client.RemoveItem(ctx, customerID, itemID, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *CartService_OTClientWrapper) UpdateItem(ctx context.Context, customerID string, item cart.Item) (err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("CartService_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "CartServiceClient_UpdateItem")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	err = handler.Client.UpdateItem(ctx, customerID, item, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

