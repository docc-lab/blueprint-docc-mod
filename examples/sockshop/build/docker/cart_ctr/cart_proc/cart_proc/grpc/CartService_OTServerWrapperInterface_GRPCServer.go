// Blueprint: Auto-generated by GRPC Plugin
package grpc

import (
	"context"
	"net"
	"google.golang.org/grpc"
	"blueprint/goproc/cart_proc/ot"
)

type CartService_GRPCServerHandler struct {
	UnimplementedCartService_OTServerWrapperInterfaceServer
	Service ot.CartService_OTServerWrapperInterface
	Address string
}

func New_CartService_GRPCServerHandler(ctx context.Context, service ot.CartService_OTServerWrapperInterface, serverAddress string) (*CartService_GRPCServerHandler, error) {
	handler := &CartService_GRPCServerHandler{}
	handler.Service = service
	handler.Address = serverAddress
	return handler, nil
}

// Blueprint: Run is called automatically in a separate goroutine by runtime/plugins/golang/di.go
func (handler *CartService_GRPCServerHandler) Run(ctx context.Context) error {
	lis, err := net.Listen("tcp", handler.Address)
	if err != nil {
		return err
	}

	s := grpc.NewServer()
	RegisterCartService_OTServerWrapperInterfaceServer(s, handler)

	go func() {
		select {
		case <-ctx.Done():
			s.GracefulStop()
		}
	}()

	return s.Serve(lis)
}


func (handler *CartService_GRPCServerHandler) AddItem(ctx context.Context, req *CartService_OTServerWrapperInterface_AddItem_Request) (*CartService_OTServerWrapperInterface_AddItem_Response, error) {
	customerID, item, traceCtx := req.unmarshall()
	ret0, err := handler.Service.AddItem(ctx, customerID, item, traceCtx)
	if err != nil {
		return nil, err
	}

	rsp := &CartService_OTServerWrapperInterface_AddItem_Response{}
	rsp.marshall(ret0)
	return rsp, nil
}

func (handler *CartService_GRPCServerHandler) DeleteCart(ctx context.Context, req *CartService_OTServerWrapperInterface_DeleteCart_Request) (*CartService_OTServerWrapperInterface_DeleteCart_Response, error) {
	customerID, traceCtx := req.unmarshall()
	err := handler.Service.DeleteCart(ctx, customerID, traceCtx)
	if err != nil {
		return nil, err
	}

	rsp := &CartService_OTServerWrapperInterface_DeleteCart_Response{}
	rsp.marshall()
	return rsp, nil
}

func (handler *CartService_GRPCServerHandler) GetCart(ctx context.Context, req *CartService_OTServerWrapperInterface_GetCart_Request) (*CartService_OTServerWrapperInterface_GetCart_Response, error) {
	customerID, traceCtx := req.unmarshall()
	ret0, err := handler.Service.GetCart(ctx, customerID, traceCtx)
	if err != nil {
		return nil, err
	}

	rsp := &CartService_OTServerWrapperInterface_GetCart_Response{}
	rsp.marshall(ret0)
	return rsp, nil
}

func (handler *CartService_GRPCServerHandler) GetItem(ctx context.Context, req *CartService_OTServerWrapperInterface_GetItem_Request) (*CartService_OTServerWrapperInterface_GetItem_Response, error) {
	customerID, itemID, traceCtx := req.unmarshall()
	ret0, err := handler.Service.GetItem(ctx, customerID, itemID, traceCtx)
	if err != nil {
		return nil, err
	}

	rsp := &CartService_OTServerWrapperInterface_GetItem_Response{}
	rsp.marshall(ret0)
	return rsp, nil
}

func (handler *CartService_GRPCServerHandler) MergeCarts(ctx context.Context, req *CartService_OTServerWrapperInterface_MergeCarts_Request) (*CartService_OTServerWrapperInterface_MergeCarts_Response, error) {
	customerID, sessionID, traceCtx := req.unmarshall()
	err := handler.Service.MergeCarts(ctx, customerID, sessionID, traceCtx)
	if err != nil {
		return nil, err
	}

	rsp := &CartService_OTServerWrapperInterface_MergeCarts_Response{}
	rsp.marshall()
	return rsp, nil
}

func (handler *CartService_GRPCServerHandler) RemoveItem(ctx context.Context, req *CartService_OTServerWrapperInterface_RemoveItem_Request) (*CartService_OTServerWrapperInterface_RemoveItem_Response, error) {
	customerID, itemID, traceCtx := req.unmarshall()
	err := handler.Service.RemoveItem(ctx, customerID, itemID, traceCtx)
	if err != nil {
		return nil, err
	}

	rsp := &CartService_OTServerWrapperInterface_RemoveItem_Response{}
	rsp.marshall()
	return rsp, nil
}

func (handler *CartService_GRPCServerHandler) UpdateItem(ctx context.Context, req *CartService_OTServerWrapperInterface_UpdateItem_Request) (*CartService_OTServerWrapperInterface_UpdateItem_Response, error) {
	customerID, item, traceCtx := req.unmarshall()
	err := handler.Service.UpdateItem(ctx, customerID, item, traceCtx)
	if err != nil {
		return nil, err
	}

	rsp := &CartService_OTServerWrapperInterface_UpdateItem_Response{}
	rsp.marshall()
	return rsp, nil
}

