// Blueprint: Auto-generated by XTrace Plugin
package ot

import (
	"github.com/blueprint-uservices/blueprint/runtime/core/backend"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/cart"
	"context"
	"go.opentelemetry.io/otel/trace"
)

type CartService_OTServerWrapperInterface interface {
	AddItem(ctx context.Context, customerID string, item cart.Item, traceCtx string) (cart.Item, error)
	DeleteCart(ctx context.Context, customerID string, traceCtx string) (error)
	GetCart(ctx context.Context, customerID string, traceCtx string) ([]cart.Item, error)
	GetItem(ctx context.Context, customerID string, itemID string, traceCtx string) (cart.Item, error)
	MergeCarts(ctx context.Context, customerID string, sessionID string, traceCtx string) (error)
	RemoveItem(ctx context.Context, customerID string, itemID string, traceCtx string) (error)
	UpdateItem(ctx context.Context, customerID string, item cart.Item, traceCtx string) (error)
	
}

type CartService_OTServerWrapper struct {
	Service cart.CartService
	CollClient backend.Tracer
}

func New_CartService_OTServerWrapper(ctx context.Context, service cart.CartService, coll_client backend.Tracer) (*CartService_OTServerWrapper, error) {
	handler := &CartService_OTServerWrapper{}
	handler.Service = service
	handler.CollClient = coll_client
	return handler, nil
}


func (handler *CartService_OTServerWrapper) AddItem(ctx context.Context, customerID string, item cart.Item, traceCtx string) (ret0 cart.Item, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("CartService")
	ctx, span := tr.Start(ctx, "CartServiceServer_AddItem")
	defer span.End()
	ret0, err = handler.Service.AddItem(ctx, customerID, item)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *CartService_OTServerWrapper) DeleteCart(ctx context.Context, customerID string, traceCtx string) (err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("CartService")
	ctx, span := tr.Start(ctx, "CartServiceServer_DeleteCart")
	defer span.End()
	err = handler.Service.DeleteCart(ctx, customerID)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *CartService_OTServerWrapper) GetCart(ctx context.Context, customerID string, traceCtx string) (ret0 []cart.Item, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("CartService")
	ctx, span := tr.Start(ctx, "CartServiceServer_GetCart")
	defer span.End()
	ret0, err = handler.Service.GetCart(ctx, customerID)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *CartService_OTServerWrapper) GetItem(ctx context.Context, customerID string, itemID string, traceCtx string) (ret0 cart.Item, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("CartService")
	ctx, span := tr.Start(ctx, "CartServiceServer_GetItem")
	defer span.End()
	ret0, err = handler.Service.GetItem(ctx, customerID, itemID)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *CartService_OTServerWrapper) MergeCarts(ctx context.Context, customerID string, sessionID string, traceCtx string) (err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("CartService")
	ctx, span := tr.Start(ctx, "CartServiceServer_MergeCarts")
	defer span.End()
	err = handler.Service.MergeCarts(ctx, customerID, sessionID)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *CartService_OTServerWrapper) RemoveItem(ctx context.Context, customerID string, itemID string, traceCtx string) (err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("CartService")
	ctx, span := tr.Start(ctx, "CartServiceServer_RemoveItem")
	defer span.End()
	err = handler.Service.RemoveItem(ctx, customerID, itemID)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *CartService_OTServerWrapper) UpdateItem(ctx context.Context, customerID string, item cart.Item, traceCtx string) (err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("CartService")
	ctx, span := tr.Start(ctx, "CartServiceServer_UpdateItem")
	defer span.End()
	err = handler.Service.UpdateItem(ctx, customerID, item)
	if err != nil {
		span.RecordError(err)
	}
	return
}

