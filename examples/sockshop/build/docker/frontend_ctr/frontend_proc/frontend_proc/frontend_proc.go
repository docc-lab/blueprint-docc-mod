// Package main is auto-generated by gogen/namespacebuilder.go
//
// It provides funcs for instantiating the frontend_proc namespace.
//
// To instantiate the frontend_proc namespace, first call [New_frontend_proc] and then either call 
// [Build] or [BuildWithParent].
// 
// See [golang.NamespaceBuilder] docs for more information about the behavior of [Build]
package main

import (
	"github.com/blueprint-uservices/blueprint/runtime/plugins/slogger"
	"blueprint/goproc/frontend_proc/retries"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/catalogue"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/order"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/frontend"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/tracingagent"
	"blueprint/goproc/frontend_proc/pool"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/user"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/cart"
	"github.com/blueprint-uservices/blueprint/runtime/core/backend"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/golang"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/opentelemetry"
	"blueprint/goproc/frontend_proc/ot"
	"blueprint/goproc/frontend_proc/http"
)

// Initializes the frontend_proc namespace by defining all of the nodes that run
// within the namespace.
//
// [Build] or [BuildWithParent] must be called on the return value of this func
// to actually build and run the nodes in the namespace.
func New_frontend_proc(name string) *golang.NamespaceBuilder {
	b := golang.NewNamespaceBuilder(name)
	set_frontend_proc_Args(b)
	set_frontend_proc_Instances(b)
	set_frontend_proc_Definitions(b)
	return b
}

// frontend_proc requires that its arguments are either:
//  - explicitly set with [golang.NamespaceBuilder.Set]
//  - passed on the command line (if built using [golang.NamespaceBuilder.Build])
//  - are defined in parent (if built using [golang.NamespaceBuilder.BuildWithParent])
//
// The following arguments will be eagerly checked and building the namespace
// will fail if they haven't been provided:
//   cart_service.grpc.dial_addr
//   catalogue_service.grpc.dial_addr
//   frontend.http.bind_addr
//   order_service.grpc.dial_addr
//   user_service.grpc.dial_addr
//
// The following arguments are optional and a failure will only occur if the client
// tries to build a node that needs the argument to be set
func set_frontend_proc_Args(b *golang.NamespaceBuilder) {
	b.Required("cart_service.grpc.dial_addr", "Argument generated by Blueprint IR: cart_service.grpc.dial_addr = AddressConfig()")
	b.Required("catalogue_service.grpc.dial_addr", "Argument generated by Blueprint IR: catalogue_service.grpc.dial_addr = AddressConfig()")
	b.Required("frontend.http.bind_addr", "Argument generated by Blueprint IR: frontend.http.bind_addr = AddressConfig()")
	b.Required("order_service.grpc.dial_addr", "Argument generated by Blueprint IR: order_service.grpc.dial_addr = AddressConfig()")
	b.Required("user_service.grpc.dial_addr", "Argument generated by Blueprint IR: user_service.grpc.dial_addr = AddressConfig()")
}

// When the frontend_proc namespace is built it will automatically instantiate
// the following nodes:
//   frontend_proc.stdoutmetriccollector
//   frontend_proc.logger
//   user_service.clientpool
//   user_service.client.retrier
//   user_service.client
//   catalogue_service.clientpool
//   catalogue_service.client.retrier
//   catalogue_service.client
//   cart_service.clientpool
//   cart_service.client.retrier
//   cart_service.client
//   order_service.clientpool
//   order_service.client.retrier
//   order_service.client
//   frontend
//   tracing_agent.ctr
//   tracing_agent
//   frontend.server.ot
//   frontend.http_server
func set_frontend_proc_Instances(b *golang.NamespaceBuilder) {
	b.Instantiate("frontend_proc.stdoutmetriccollector")
	b.Instantiate("frontend_proc.logger")
	b.Instantiate("user_service.clientpool")
	b.Instantiate("user_service.client.retrier")
	b.Instantiate("user_service.client")
	b.Instantiate("catalogue_service.clientpool")
	b.Instantiate("catalogue_service.client.retrier")
	b.Instantiate("catalogue_service.client")
	b.Instantiate("cart_service.clientpool")
	b.Instantiate("cart_service.client.retrier")
	b.Instantiate("cart_service.client")
	b.Instantiate("order_service.clientpool")
	b.Instantiate("order_service.client.retrier")
	b.Instantiate("order_service.client")
	b.Instantiate("frontend")
	b.Instantiate("tracing_agent.ctr")
	b.Instantiate("tracing_agent")
	b.Instantiate("frontend.server.ot")
	b.Instantiate("frontend.http_server")
}

// The frontend_proc namespace contains definitions for instantiating
// the following nodes:
//   cart_service.client
//   cart_service.client.retrier
//   cart_service.clientpool
//   catalogue_service.client
//   catalogue_service.client.retrier
//   catalogue_service.clientpool
//   frontend
//   frontend.http_server
//   frontend.server.ot
//   frontend_proc.logger
//   frontend_proc.stdoutmetriccollector
//   order_service.client
//   order_service.client.retrier
//   order_service.clientpool
//   tracing_agent
//   tracing_agent.ctr
//   user_service.client
//   user_service.client.retrier
//   user_service.clientpool
func set_frontend_proc_Definitions(b *golang.NamespaceBuilder) {
	b.Define("cart_service.client", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin workflow/ir_workflowservice.go
		var client cart.CartService
		err := n.Get("cart_service.client.retrier", &client)
		return client, err
	})
	
	b.Define("cart_service.client.retrier", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var client ot.CartService_OTClientWrapperInterface
		if err := n.Get("cart_service.clientpool", &client); err != nil {
			return nil, err
		}
		
		return retries.New_CartService_RetrierClient(n.Context(), client)
	})
	
	b.Define("cart_service.clientpool", func(n *golang.Namespace) (any, error) {
		return pool.New_CartService_Pool(n), nil
	})
	
	b.Define("catalogue_service.client", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin workflow/ir_workflowservice.go
		var client catalogue.CatalogueService
		err := n.Get("catalogue_service.client.retrier", &client)
		return client, err
	})
	
	b.Define("catalogue_service.client.retrier", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var client ot.CatalogueService_OTClientWrapperInterface
		if err := n.Get("catalogue_service.clientpool", &client); err != nil {
			return nil, err
		}
		
		return retries.New_CatalogueService_RetrierClient(n.Context(), client)
	})
	
	b.Define("catalogue_service.clientpool", func(n *golang.Namespace) (any, error) {
		return pool.New_CatalogueService_Pool(n), nil
	})
	
	b.Define("frontend", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var user user.UserService
		if err := n.Get("user_service.client", &user); err != nil {
			return nil, err
		}
		
		var catalogue catalogue.CatalogueService
		if err := n.Get("catalogue_service.client", &catalogue); err != nil {
			return nil, err
		}
		
		var cart cart.CartService
		if err := n.Get("cart_service.client", &cart); err != nil {
			return nil, err
		}
		
		var order order.OrderService
		if err := n.Get("order_service.client", &order); err != nil {
			return nil, err
		}
		
		return frontend.NewFrontend(n.Context(), user, catalogue, cart, order)
	})
	
	b.Define("frontend.http_server", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var service ot.Frontend_OTServerWrapperInterface
		if err := n.Get("frontend.server.ot", &service); err != nil {
			return nil, err
		}
		
		var serverAddr string
		if err := n.Get("frontend.http.bind_addr", &serverAddr); err != nil {
			return nil, err
		}
		
		return http.New_Frontend_HTTPServerHandler(n.Context(), service, serverAddr)
	})
	
	b.Define("frontend.server.ot", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var service frontend.Frontend
		if err := n.Get("frontend", &service); err != nil {
			return nil, err
		}
		
		var otCollectorClient backend.Tracer
		if err := n.Get("tracing_agent", &otCollectorClient); err != nil {
			return nil, err
		}
		
		return ot.New_Frontend_OTServerWrapper(n.Context(), service, otCollectorClient)
	})
	
	b.Define("frontend_proc.logger", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		return slogger.NewSLogger(n.Context())
	})
	
	b.Define("frontend_proc.stdoutmetriccollector", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		return opentelemetry.NewStdoutMetricCollector(n.Context())
	})
	
	b.Define("order_service.client", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin workflow/ir_workflowservice.go
		var client order.OrderService
		err := n.Get("order_service.client.retrier", &client)
		return client, err
	})
	
	b.Define("order_service.client.retrier", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var client ot.OrderService_OTClientWrapperInterface
		if err := n.Get("order_service.clientpool", &client); err != nil {
			return nil, err
		}
		
		return retries.New_OrderService_RetrierClient(n.Context(), client)
	})
	
	b.Define("order_service.clientpool", func(n *golang.Namespace) (any, error) {
		return pool.New_OrderService_Pool(n), nil
	})
	
	b.Define("tracing_agent", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var agent tracingagent.TracingAgentService
		if err := n.Get("tracing_agent.ctr", &agent); err != nil {
			return nil, err
		}
		
		return tracingagent.NewTracingAgentClient(n.Context(), agent)
	})
	
	b.Define("tracing_agent.ctr", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		return tracingagent.NewTracingAgent(n.Context())
	})
	
	b.Define("user_service.client", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin workflow/ir_workflowservice.go
		var client user.UserService
		err := n.Get("user_service.client.retrier", &client)
		return client, err
	})
	
	b.Define("user_service.client.retrier", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var client ot.UserService_OTClientWrapperInterface
		if err := n.Get("user_service.clientpool", &client); err != nil {
			return nil, err
		}
		
		return retries.New_UserService_RetrierClient(n.Context(), client)
	})
	
	b.Define("user_service.clientpool", func(n *golang.Namespace) (any, error) {
		return pool.New_UserService_Pool(n), nil
	})
	
}
