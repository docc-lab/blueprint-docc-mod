// Blueprint: Auto-generated by Retries Plugin
package retries

import (
	"blueprint/goproc/frontend_proc/ot"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/catalogue"
	"context"
)

type CatalogueService_RetrierClient struct {
	Client ot.CatalogueService_OTClientWrapperInterface
	MaxTries int
}

func New_CatalogueService_RetrierClient (ctx context.Context, client ot.CatalogueService_OTClientWrapperInterface) (*CatalogueService_RetrierClient, error) {
	handler := &CatalogueService_RetrierClient{}
	handler.Client = client
	handler.MaxTries = 3
	return handler, nil
}


func (client *CatalogueService_RetrierClient) AddSock(ctx context.Context, sock catalogue.Sock) (ret0 string, err error) {
	for i := 0; i < client.MaxTries; i++ {
		ret0, err = client.Client.AddSock(ctx, sock)
		if err == nil {
			return
		}
	}
	return
}

func (client *CatalogueService_RetrierClient) AddTags(ctx context.Context, tags []string) (err error) {
	for i := 0; i < client.MaxTries; i++ {
		err = client.Client.AddTags(ctx, tags)
		if err == nil {
			return
		}
	}
	return
}

func (client *CatalogueService_RetrierClient) Count(ctx context.Context, tags []string) (ret0 int, err error) {
	for i := 0; i < client.MaxTries; i++ {
		ret0, err = client.Client.Count(ctx, tags)
		if err == nil {
			return
		}
	}
	return
}

func (client *CatalogueService_RetrierClient) DeleteSock(ctx context.Context, id string) (err error) {
	for i := 0; i < client.MaxTries; i++ {
		err = client.Client.DeleteSock(ctx, id)
		if err == nil {
			return
		}
	}
	return
}

func (client *CatalogueService_RetrierClient) Get(ctx context.Context, id string) (ret0 catalogue.Sock, err error) {
	for i := 0; i < client.MaxTries; i++ {
		ret0, err = client.Client.Get(ctx, id)
		if err == nil {
			return
		}
	}
	return
}

func (client *CatalogueService_RetrierClient) List(ctx context.Context, tags []string, order string, pageNum int, pageSize int) (ret0 []catalogue.Sock, err error) {
	for i := 0; i < client.MaxTries; i++ {
		ret0, err = client.Client.List(ctx, tags, order, pageNum, pageSize)
		if err == nil {
			return
		}
	}
	return
}

func (client *CatalogueService_RetrierClient) Tags(ctx context.Context) (ret0 []string, err error) {
	for i := 0; i < client.MaxTries; i++ {
		ret0, err = client.Client.Tags(ctx)
		if err == nil {
			return
		}
	}
	return
}

