// Blueprint: Auto-generated by Retries Plugin
package retries

import (
	"context"
	"blueprint/goproc/frontend_proc/ot"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/user"
)

type UserService_RetrierClient struct {
	Client ot.UserService_OTClientWrapperInterface
	MaxTries int
}

func New_UserService_RetrierClient (ctx context.Context, client ot.UserService_OTClientWrapperInterface) (*UserService_RetrierClient, error) {
	handler := &UserService_RetrierClient{}
	handler.Client = client
	handler.MaxTries = 3
	return handler, nil
}


func (client *UserService_RetrierClient) Delete(ctx context.Context, entity string, id string) (err error) {
	for i := 0; i < client.MaxTries; i++ {
		err = client.Client.Delete(ctx, entity, id)
		if err == nil {
			return
		}
	}
	return
}

func (client *UserService_RetrierClient) GetAddresses(ctx context.Context, id string) (ret0 []user.Address, err error) {
	for i := 0; i < client.MaxTries; i++ {
		ret0, err = client.Client.GetAddresses(ctx, id)
		if err == nil {
			return
		}
	}
	return
}

func (client *UserService_RetrierClient) GetCards(ctx context.Context, cardid string) (ret0 []user.Card, err error) {
	for i := 0; i < client.MaxTries; i++ {
		ret0, err = client.Client.GetCards(ctx, cardid)
		if err == nil {
			return
		}
	}
	return
}

func (client *UserService_RetrierClient) GetUsers(ctx context.Context, id string) (ret0 []user.User, err error) {
	for i := 0; i < client.MaxTries; i++ {
		ret0, err = client.Client.GetUsers(ctx, id)
		if err == nil {
			return
		}
	}
	return
}

func (client *UserService_RetrierClient) Login(ctx context.Context, username string, password string) (ret0 user.User, err error) {
	for i := 0; i < client.MaxTries; i++ {
		ret0, err = client.Client.Login(ctx, username, password)
		if err == nil {
			return
		}
	}
	return
}

func (client *UserService_RetrierClient) PostAddress(ctx context.Context, userid string, address user.Address) (ret0 string, err error) {
	for i := 0; i < client.MaxTries; i++ {
		ret0, err = client.Client.PostAddress(ctx, userid, address)
		if err == nil {
			return
		}
	}
	return
}

func (client *UserService_RetrierClient) PostCard(ctx context.Context, userid string, card user.Card) (ret0 string, err error) {
	for i := 0; i < client.MaxTries; i++ {
		ret0, err = client.Client.PostCard(ctx, userid, card)
		if err == nil {
			return
		}
	}
	return
}

func (client *UserService_RetrierClient) PostUser(ctx context.Context, user user.User) (ret0 string, err error) {
	for i := 0; i < client.MaxTries; i++ {
		ret0, err = client.Client.PostUser(ctx, user)
		if err == nil {
			return
		}
	}
	return
}

func (client *UserService_RetrierClient) Register(ctx context.Context, username string, password string, email string, first string, last string) (ret0 string, err error) {
	for i := 0; i < client.MaxTries; i++ {
		ret0, err = client.Client.Register(ctx, username, password, email, first, last)
		if err == nil {
			return
		}
	}
	return
}

