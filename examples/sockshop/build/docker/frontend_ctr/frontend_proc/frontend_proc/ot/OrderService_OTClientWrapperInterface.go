// Blueprint: Auto-generated by OT Plugin
package ot

import (
	"context"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/order"
	"github.com/blueprint-uservices/blueprint/runtime/core/backend"
)

type OrderService_OTClientWrapperInterface interface {
	GetOrder(ctx context.Context, orderID string) (order.Order, error)
	GetOrders(ctx context.Context, customerID string) ([]order.Order, error)
	NewOrder(ctx context.Context, customerID string, addressID string, cardID string, cartID string) (order.Order, error)
	
}

type OrderService_OTClientWrapper struct {
	Client OrderService_OTServerWrapperInterface
	CollClient backend.Tracer
}

func New_OrderService_OTClientWrapper(ctx context.Context, client OrderService_OTServerWrapperInterface, coll_client backend.Tracer) (*OrderService_OTClientWrapper, error) {
	handler := &OrderService_OTClientWrapper{}
	handler.Client = client
	handler.CollClient = coll_client
	return handler, nil
}


func (handler *OrderService_OTClientWrapper) GetOrder(ctx context.Context, orderID string) (ret0 order.Order, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("OrderService_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "OrderServiceClient_GetOrder")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.GetOrder(ctx, orderID, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *OrderService_OTClientWrapper) GetOrders(ctx context.Context, customerID string) (ret0 []order.Order, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("OrderService_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "OrderServiceClient_GetOrders")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.GetOrders(ctx, customerID, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *OrderService_OTClientWrapper) NewOrder(ctx context.Context, customerID string, addressID string, cardID string, cartID string) (ret0 order.Order, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("OrderService_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "OrderServiceClient_NewOrder")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.NewOrder(ctx, customerID, addressID, cardID, cartID, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

