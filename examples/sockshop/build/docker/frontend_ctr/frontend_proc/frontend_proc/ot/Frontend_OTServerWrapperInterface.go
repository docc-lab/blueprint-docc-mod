// Blueprint: Auto-generated by XTrace Plugin
package ot

import (
	"context"
	"go.opentelemetry.io/otel/trace"
	"github.com/blueprint-uservices/blueprint/runtime/core/backend"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/user"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/cart"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/order"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/catalogue"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/frontend"
)

type Frontend_OTServerWrapperInterface interface {
	AddItem(ctx context.Context, sessionID string, itemID string, traceCtx string) (string, error)
	DeleteCart(ctx context.Context, sessionID string, traceCtx string) (error)
	GetAddress(ctx context.Context, addressID string, traceCtx string) (user.Address, error)
	GetCard(ctx context.Context, cardID string, traceCtx string) (user.Card, error)
	GetCart(ctx context.Context, sessionID string, traceCtx string) ([]cart.Item, error)
	GetOrder(ctx context.Context, orderID string, traceCtx string) (order.Order, error)
	GetOrders(ctx context.Context, userID string, traceCtx string) ([]order.Order, error)
	GetSock(ctx context.Context, itemID string, traceCtx string) (catalogue.Sock, error)
	GetUser(ctx context.Context, userID string, traceCtx string) (user.User, error)
	ListItems(ctx context.Context, tags []string, order string, pageNum int, pageSize int, traceCtx string) ([]catalogue.Sock, error)
	ListTags(ctx context.Context, traceCtx string) ([]string, error)
	LoadCatalogue(ctx context.Context, traceCtx string) (string, error)
	Login(ctx context.Context, sessionID string, username string, password string, traceCtx string) (string, user.User, error)
	NewOrder(ctx context.Context, userID string, addressID string, cardID string, cartID string, traceCtx string) (order.Order, error)
	PostAddress(ctx context.Context, userID string, address user.Address, traceCtx string) (string, error)
	PostCard(ctx context.Context, userID string, card user.Card, traceCtx string) (string, error)
	Register(ctx context.Context, sessionID string, username string, password string, email string, first string, last string, traceCtx string) (string, error)
	RemoveItem(ctx context.Context, sessionID string, itemID string, traceCtx string) (error)
	UpdateItem(ctx context.Context, sessionID string, itemID string, quantity int, traceCtx string) (string, error)
	
}

type Frontend_OTServerWrapper struct {
	Service frontend.Frontend
	CollClient backend.Tracer
}

func New_Frontend_OTServerWrapper(ctx context.Context, service frontend.Frontend, coll_client backend.Tracer) (*Frontend_OTServerWrapper, error) {
	handler := &Frontend_OTServerWrapper{}
	handler.Service = service
	handler.CollClient = coll_client
	return handler, nil
}


func (handler *Frontend_OTServerWrapper) AddItem(ctx context.Context, sessionID string, itemID string, traceCtx string) (ret0 string, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("Frontend")
	ctx, span := tr.Start(ctx, "FrontendServer_AddItem")
	defer span.End()
	ret0, err = handler.Service.AddItem(ctx, sessionID, itemID)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *Frontend_OTServerWrapper) DeleteCart(ctx context.Context, sessionID string, traceCtx string) (err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("Frontend")
	ctx, span := tr.Start(ctx, "FrontendServer_DeleteCart")
	defer span.End()
	err = handler.Service.DeleteCart(ctx, sessionID)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *Frontend_OTServerWrapper) GetAddress(ctx context.Context, addressID string, traceCtx string) (ret0 user.Address, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("Frontend")
	ctx, span := tr.Start(ctx, "FrontendServer_GetAddress")
	defer span.End()
	ret0, err = handler.Service.GetAddress(ctx, addressID)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *Frontend_OTServerWrapper) GetCard(ctx context.Context, cardID string, traceCtx string) (ret0 user.Card, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("Frontend")
	ctx, span := tr.Start(ctx, "FrontendServer_GetCard")
	defer span.End()
	ret0, err = handler.Service.GetCard(ctx, cardID)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *Frontend_OTServerWrapper) GetCart(ctx context.Context, sessionID string, traceCtx string) (ret0 []cart.Item, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("Frontend")
	ctx, span := tr.Start(ctx, "FrontendServer_GetCart")
	defer span.End()
	ret0, err = handler.Service.GetCart(ctx, sessionID)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *Frontend_OTServerWrapper) GetOrder(ctx context.Context, orderID string, traceCtx string) (ret0 order.Order, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("Frontend")
	ctx, span := tr.Start(ctx, "FrontendServer_GetOrder")
	defer span.End()
	ret0, err = handler.Service.GetOrder(ctx, orderID)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *Frontend_OTServerWrapper) GetOrders(ctx context.Context, userID string, traceCtx string) (ret0 []order.Order, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("Frontend")
	ctx, span := tr.Start(ctx, "FrontendServer_GetOrders")
	defer span.End()
	ret0, err = handler.Service.GetOrders(ctx, userID)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *Frontend_OTServerWrapper) GetSock(ctx context.Context, itemID string, traceCtx string) (ret0 catalogue.Sock, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("Frontend")
	ctx, span := tr.Start(ctx, "FrontendServer_GetSock")
	defer span.End()
	ret0, err = handler.Service.GetSock(ctx, itemID)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *Frontend_OTServerWrapper) GetUser(ctx context.Context, userID string, traceCtx string) (ret0 user.User, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("Frontend")
	ctx, span := tr.Start(ctx, "FrontendServer_GetUser")
	defer span.End()
	ret0, err = handler.Service.GetUser(ctx, userID)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *Frontend_OTServerWrapper) ListItems(ctx context.Context, tags []string, order string, pageNum int, pageSize int, traceCtx string) (ret0 []catalogue.Sock, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("Frontend")
	ctx, span := tr.Start(ctx, "FrontendServer_ListItems")
	defer span.End()
	ret0, err = handler.Service.ListItems(ctx, tags, order, pageNum, pageSize)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *Frontend_OTServerWrapper) ListTags(ctx context.Context, traceCtx string) (ret0 []string, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("Frontend")
	ctx, span := tr.Start(ctx, "FrontendServer_ListTags")
	defer span.End()
	ret0, err = handler.Service.ListTags(ctx)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *Frontend_OTServerWrapper) LoadCatalogue(ctx context.Context, traceCtx string) (ret0 string, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("Frontend")
	ctx, span := tr.Start(ctx, "FrontendServer_LoadCatalogue")
	defer span.End()
	ret0, err = handler.Service.LoadCatalogue(ctx)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *Frontend_OTServerWrapper) Login(ctx context.Context, sessionID string, username string, password string, traceCtx string) (ret0 string, ret1 user.User, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("Frontend")
	ctx, span := tr.Start(ctx, "FrontendServer_Login")
	defer span.End()
	ret0, ret1, err = handler.Service.Login(ctx, sessionID, username, password)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *Frontend_OTServerWrapper) NewOrder(ctx context.Context, userID string, addressID string, cardID string, cartID string, traceCtx string) (ret0 order.Order, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("Frontend")
	ctx, span := tr.Start(ctx, "FrontendServer_NewOrder")
	defer span.End()
	ret0, err = handler.Service.NewOrder(ctx, userID, addressID, cardID, cartID)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *Frontend_OTServerWrapper) PostAddress(ctx context.Context, userID string, address user.Address, traceCtx string) (ret0 string, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("Frontend")
	ctx, span := tr.Start(ctx, "FrontendServer_PostAddress")
	defer span.End()
	ret0, err = handler.Service.PostAddress(ctx, userID, address)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *Frontend_OTServerWrapper) PostCard(ctx context.Context, userID string, card user.Card, traceCtx string) (ret0 string, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("Frontend")
	ctx, span := tr.Start(ctx, "FrontendServer_PostCard")
	defer span.End()
	ret0, err = handler.Service.PostCard(ctx, userID, card)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *Frontend_OTServerWrapper) Register(ctx context.Context, sessionID string, username string, password string, email string, first string, last string, traceCtx string) (ret0 string, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("Frontend")
	ctx, span := tr.Start(ctx, "FrontendServer_Register")
	defer span.End()
	ret0, err = handler.Service.Register(ctx, sessionID, username, password, email, first, last)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *Frontend_OTServerWrapper) RemoveItem(ctx context.Context, sessionID string, itemID string, traceCtx string) (err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("Frontend")
	ctx, span := tr.Start(ctx, "FrontendServer_RemoveItem")
	defer span.End()
	err = handler.Service.RemoveItem(ctx, sessionID, itemID)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *Frontend_OTServerWrapper) UpdateItem(ctx context.Context, sessionID string, itemID string, quantity int, traceCtx string) (ret0 string, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("Frontend")
	ctx, span := tr.Start(ctx, "FrontendServer_UpdateItem")
	defer span.End()
	ret0, err = handler.Service.UpdateItem(ctx, sessionID, itemID, quantity)
	if err != nil {
		span.RecordError(err)
	}
	return
}

