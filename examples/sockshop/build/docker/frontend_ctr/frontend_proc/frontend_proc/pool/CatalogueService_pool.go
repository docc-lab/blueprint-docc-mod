// This file is auto-generated by the Blueprint clientpool plugin
package pool

import (
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/catalogue"
	"context"
	"fmt"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/clientpool"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/golang"
	"blueprint/goproc/frontend_proc/ot"
)

type CatalogueService_OTClientWrapperInterface_ClientPool struct {
	clients *clientpool.ClientPool[ot.CatalogueService_OTClientWrapperInterface]
}

func New_CatalogueService_Pool(parent *golang.Namespace) *CatalogueService_OTClientWrapperInterface_ClientPool {
	i := 0
	createClient := func() (ot.CatalogueService_OTClientWrapperInterface, error) {
		clientName := fmt.Sprintf("catalogue_service.clientpool.%v", i)
		n, err := New_CatalogueService_PoolClient(clientName).BuildWithParent(parent)
		if err != nil {
			return nil, err
		}
		i++
		var client ot.CatalogueService_OTClientWrapperInterface
		err = n.Get("catalogue_service.client.ot", &client)
		return client, err
	}
	clients := clientpool.NewClientPool(10, createClient)
	return &CatalogueService_OTClientWrapperInterface_ClientPool{clients: clients}
}


func (pool *CatalogueService_OTClientWrapperInterface_ClientPool) AddSock(ctx context.Context, sock catalogue.Sock) (ret0 string, err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.AddSock(ctx, sock)
}

func (pool *CatalogueService_OTClientWrapperInterface_ClientPool) AddTags(ctx context.Context, tags []string) (err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.AddTags(ctx, tags)
}

func (pool *CatalogueService_OTClientWrapperInterface_ClientPool) Count(ctx context.Context, tags []string) (ret0 int, err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.Count(ctx, tags)
}

func (pool *CatalogueService_OTClientWrapperInterface_ClientPool) DeleteSock(ctx context.Context, id string) (err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.DeleteSock(ctx, id)
}

func (pool *CatalogueService_OTClientWrapperInterface_ClientPool) Get(ctx context.Context, id string) (ret0 catalogue.Sock, err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.Get(ctx, id)
}

func (pool *CatalogueService_OTClientWrapperInterface_ClientPool) List(ctx context.Context, tags []string, order string, pageNum int, pageSize int) (ret0 []catalogue.Sock, err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.List(ctx, tags, order, pageNum, pageSize)
}

func (pool *CatalogueService_OTClientWrapperInterface_ClientPool) Tags(ctx context.Context) (ret0 []string, err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.Tags(ctx)
}



