// This file is auto-generated by the Blueprint clientpool plugin
package pool

import (
	"fmt"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/clientpool"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/golang"
	"blueprint/goproc/frontend_proc/ot"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/cart"
	"context"
)

type CartService_OTClientWrapperInterface_ClientPool struct {
	clients *clientpool.ClientPool[ot.CartService_OTClientWrapperInterface]
}

func New_CartService_Pool(parent *golang.Namespace) *CartService_OTClientWrapperInterface_ClientPool {
	i := 0
	createClient := func() (ot.CartService_OTClientWrapperInterface, error) {
		clientName := fmt.Sprintf("cart_service.clientpool.%v", i)
		n, err := New_CartService_PoolClient(clientName).BuildWithParent(parent)
		if err != nil {
			return nil, err
		}
		i++
		var client ot.CartService_OTClientWrapperInterface
		err = n.Get("cart_service.client.ot", &client)
		return client, err
	}
	clients := clientpool.NewClientPool(10, createClient)
	return &CartService_OTClientWrapperInterface_ClientPool{clients: clients}
}


func (pool *CartService_OTClientWrapperInterface_ClientPool) AddItem(ctx context.Context, customerID string, item cart.Item) (ret0 cart.Item, err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.AddItem(ctx, customerID, item)
}

func (pool *CartService_OTClientWrapperInterface_ClientPool) DeleteCart(ctx context.Context, customerID string) (err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.DeleteCart(ctx, customerID)
}

func (pool *CartService_OTClientWrapperInterface_ClientPool) GetCart(ctx context.Context, customerID string) (ret0 []cart.Item, err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.GetCart(ctx, customerID)
}

func (pool *CartService_OTClientWrapperInterface_ClientPool) GetItem(ctx context.Context, customerID string, itemID string) (ret0 cart.Item, err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.GetItem(ctx, customerID, itemID)
}

func (pool *CartService_OTClientWrapperInterface_ClientPool) MergeCarts(ctx context.Context, customerID string, sessionID string) (err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.MergeCarts(ctx, customerID, sessionID)
}

func (pool *CartService_OTClientWrapperInterface_ClientPool) RemoveItem(ctx context.Context, customerID string, itemID string) (err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.RemoveItem(ctx, customerID, itemID)
}

func (pool *CartService_OTClientWrapperInterface_ClientPool) UpdateItem(ctx context.Context, customerID string, item cart.Item) (err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.UpdateItem(ctx, customerID, item)
}



