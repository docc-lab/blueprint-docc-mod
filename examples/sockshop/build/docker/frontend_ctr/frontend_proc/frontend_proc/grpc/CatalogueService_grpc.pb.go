// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: CatalogueService.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CatalogueService_OTServerWrapperInterface_AddSock_FullMethodName    = "/grpc.CatalogueService_OTServerWrapperInterface/AddSock"
	CatalogueService_OTServerWrapperInterface_AddTags_FullMethodName    = "/grpc.CatalogueService_OTServerWrapperInterface/AddTags"
	CatalogueService_OTServerWrapperInterface_Count_FullMethodName      = "/grpc.CatalogueService_OTServerWrapperInterface/Count"
	CatalogueService_OTServerWrapperInterface_DeleteSock_FullMethodName = "/grpc.CatalogueService_OTServerWrapperInterface/DeleteSock"
	CatalogueService_OTServerWrapperInterface_Get_FullMethodName        = "/grpc.CatalogueService_OTServerWrapperInterface/Get"
	CatalogueService_OTServerWrapperInterface_List_FullMethodName       = "/grpc.CatalogueService_OTServerWrapperInterface/List"
	CatalogueService_OTServerWrapperInterface_Tags_FullMethodName       = "/grpc.CatalogueService_OTServerWrapperInterface/Tags"
)

// CatalogueService_OTServerWrapperInterfaceClient is the client API for CatalogueService_OTServerWrapperInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatalogueService_OTServerWrapperInterfaceClient interface {
	AddSock(ctx context.Context, in *CatalogueService_OTServerWrapperInterface_AddSock_Request, opts ...grpc.CallOption) (*CatalogueService_OTServerWrapperInterface_AddSock_Response, error)
	AddTags(ctx context.Context, in *CatalogueService_OTServerWrapperInterface_AddTags_Request, opts ...grpc.CallOption) (*CatalogueService_OTServerWrapperInterface_AddTags_Response, error)
	Count(ctx context.Context, in *CatalogueService_OTServerWrapperInterface_Count_Request, opts ...grpc.CallOption) (*CatalogueService_OTServerWrapperInterface_Count_Response, error)
	DeleteSock(ctx context.Context, in *CatalogueService_OTServerWrapperInterface_DeleteSock_Request, opts ...grpc.CallOption) (*CatalogueService_OTServerWrapperInterface_DeleteSock_Response, error)
	Get(ctx context.Context, in *CatalogueService_OTServerWrapperInterface_Get_Request, opts ...grpc.CallOption) (*CatalogueService_OTServerWrapperInterface_Get_Response, error)
	List(ctx context.Context, in *CatalogueService_OTServerWrapperInterface_List_Request, opts ...grpc.CallOption) (*CatalogueService_OTServerWrapperInterface_List_Response, error)
	Tags(ctx context.Context, in *CatalogueService_OTServerWrapperInterface_Tags_Request, opts ...grpc.CallOption) (*CatalogueService_OTServerWrapperInterface_Tags_Response, error)
}

type catalogueService_OTServerWrapperInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewCatalogueService_OTServerWrapperInterfaceClient(cc grpc.ClientConnInterface) CatalogueService_OTServerWrapperInterfaceClient {
	return &catalogueService_OTServerWrapperInterfaceClient{cc}
}

func (c *catalogueService_OTServerWrapperInterfaceClient) AddSock(ctx context.Context, in *CatalogueService_OTServerWrapperInterface_AddSock_Request, opts ...grpc.CallOption) (*CatalogueService_OTServerWrapperInterface_AddSock_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CatalogueService_OTServerWrapperInterface_AddSock_Response)
	err := c.cc.Invoke(ctx, CatalogueService_OTServerWrapperInterface_AddSock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogueService_OTServerWrapperInterfaceClient) AddTags(ctx context.Context, in *CatalogueService_OTServerWrapperInterface_AddTags_Request, opts ...grpc.CallOption) (*CatalogueService_OTServerWrapperInterface_AddTags_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CatalogueService_OTServerWrapperInterface_AddTags_Response)
	err := c.cc.Invoke(ctx, CatalogueService_OTServerWrapperInterface_AddTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogueService_OTServerWrapperInterfaceClient) Count(ctx context.Context, in *CatalogueService_OTServerWrapperInterface_Count_Request, opts ...grpc.CallOption) (*CatalogueService_OTServerWrapperInterface_Count_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CatalogueService_OTServerWrapperInterface_Count_Response)
	err := c.cc.Invoke(ctx, CatalogueService_OTServerWrapperInterface_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogueService_OTServerWrapperInterfaceClient) DeleteSock(ctx context.Context, in *CatalogueService_OTServerWrapperInterface_DeleteSock_Request, opts ...grpc.CallOption) (*CatalogueService_OTServerWrapperInterface_DeleteSock_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CatalogueService_OTServerWrapperInterface_DeleteSock_Response)
	err := c.cc.Invoke(ctx, CatalogueService_OTServerWrapperInterface_DeleteSock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogueService_OTServerWrapperInterfaceClient) Get(ctx context.Context, in *CatalogueService_OTServerWrapperInterface_Get_Request, opts ...grpc.CallOption) (*CatalogueService_OTServerWrapperInterface_Get_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CatalogueService_OTServerWrapperInterface_Get_Response)
	err := c.cc.Invoke(ctx, CatalogueService_OTServerWrapperInterface_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogueService_OTServerWrapperInterfaceClient) List(ctx context.Context, in *CatalogueService_OTServerWrapperInterface_List_Request, opts ...grpc.CallOption) (*CatalogueService_OTServerWrapperInterface_List_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CatalogueService_OTServerWrapperInterface_List_Response)
	err := c.cc.Invoke(ctx, CatalogueService_OTServerWrapperInterface_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogueService_OTServerWrapperInterfaceClient) Tags(ctx context.Context, in *CatalogueService_OTServerWrapperInterface_Tags_Request, opts ...grpc.CallOption) (*CatalogueService_OTServerWrapperInterface_Tags_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CatalogueService_OTServerWrapperInterface_Tags_Response)
	err := c.cc.Invoke(ctx, CatalogueService_OTServerWrapperInterface_Tags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatalogueService_OTServerWrapperInterfaceServer is the server API for CatalogueService_OTServerWrapperInterface service.
// All implementations must embed UnimplementedCatalogueService_OTServerWrapperInterfaceServer
// for forward compatibility.
type CatalogueService_OTServerWrapperInterfaceServer interface {
	AddSock(context.Context, *CatalogueService_OTServerWrapperInterface_AddSock_Request) (*CatalogueService_OTServerWrapperInterface_AddSock_Response, error)
	AddTags(context.Context, *CatalogueService_OTServerWrapperInterface_AddTags_Request) (*CatalogueService_OTServerWrapperInterface_AddTags_Response, error)
	Count(context.Context, *CatalogueService_OTServerWrapperInterface_Count_Request) (*CatalogueService_OTServerWrapperInterface_Count_Response, error)
	DeleteSock(context.Context, *CatalogueService_OTServerWrapperInterface_DeleteSock_Request) (*CatalogueService_OTServerWrapperInterface_DeleteSock_Response, error)
	Get(context.Context, *CatalogueService_OTServerWrapperInterface_Get_Request) (*CatalogueService_OTServerWrapperInterface_Get_Response, error)
	List(context.Context, *CatalogueService_OTServerWrapperInterface_List_Request) (*CatalogueService_OTServerWrapperInterface_List_Response, error)
	Tags(context.Context, *CatalogueService_OTServerWrapperInterface_Tags_Request) (*CatalogueService_OTServerWrapperInterface_Tags_Response, error)
	mustEmbedUnimplementedCatalogueService_OTServerWrapperInterfaceServer()
}

// UnimplementedCatalogueService_OTServerWrapperInterfaceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCatalogueService_OTServerWrapperInterfaceServer struct{}

func (UnimplementedCatalogueService_OTServerWrapperInterfaceServer) AddSock(context.Context, *CatalogueService_OTServerWrapperInterface_AddSock_Request) (*CatalogueService_OTServerWrapperInterface_AddSock_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSock not implemented")
}
func (UnimplementedCatalogueService_OTServerWrapperInterfaceServer) AddTags(context.Context, *CatalogueService_OTServerWrapperInterface_AddTags_Request) (*CatalogueService_OTServerWrapperInterface_AddTags_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTags not implemented")
}
func (UnimplementedCatalogueService_OTServerWrapperInterfaceServer) Count(context.Context, *CatalogueService_OTServerWrapperInterface_Count_Request) (*CatalogueService_OTServerWrapperInterface_Count_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedCatalogueService_OTServerWrapperInterfaceServer) DeleteSock(context.Context, *CatalogueService_OTServerWrapperInterface_DeleteSock_Request) (*CatalogueService_OTServerWrapperInterface_DeleteSock_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSock not implemented")
}
func (UnimplementedCatalogueService_OTServerWrapperInterfaceServer) Get(context.Context, *CatalogueService_OTServerWrapperInterface_Get_Request) (*CatalogueService_OTServerWrapperInterface_Get_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCatalogueService_OTServerWrapperInterfaceServer) List(context.Context, *CatalogueService_OTServerWrapperInterface_List_Request) (*CatalogueService_OTServerWrapperInterface_List_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCatalogueService_OTServerWrapperInterfaceServer) Tags(context.Context, *CatalogueService_OTServerWrapperInterface_Tags_Request) (*CatalogueService_OTServerWrapperInterface_Tags_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tags not implemented")
}
func (UnimplementedCatalogueService_OTServerWrapperInterfaceServer) mustEmbedUnimplementedCatalogueService_OTServerWrapperInterfaceServer() {
}
func (UnimplementedCatalogueService_OTServerWrapperInterfaceServer) testEmbeddedByValue() {}

// UnsafeCatalogueService_OTServerWrapperInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatalogueService_OTServerWrapperInterfaceServer will
// result in compilation errors.
type UnsafeCatalogueService_OTServerWrapperInterfaceServer interface {
	mustEmbedUnimplementedCatalogueService_OTServerWrapperInterfaceServer()
}

func RegisterCatalogueService_OTServerWrapperInterfaceServer(s grpc.ServiceRegistrar, srv CatalogueService_OTServerWrapperInterfaceServer) {
	// If the following call pancis, it indicates UnimplementedCatalogueService_OTServerWrapperInterfaceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CatalogueService_OTServerWrapperInterface_ServiceDesc, srv)
}

func _CatalogueService_OTServerWrapperInterface_AddSock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CatalogueService_OTServerWrapperInterface_AddSock_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogueService_OTServerWrapperInterfaceServer).AddSock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogueService_OTServerWrapperInterface_AddSock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogueService_OTServerWrapperInterfaceServer).AddSock(ctx, req.(*CatalogueService_OTServerWrapperInterface_AddSock_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogueService_OTServerWrapperInterface_AddTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CatalogueService_OTServerWrapperInterface_AddTags_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogueService_OTServerWrapperInterfaceServer).AddTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogueService_OTServerWrapperInterface_AddTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogueService_OTServerWrapperInterfaceServer).AddTags(ctx, req.(*CatalogueService_OTServerWrapperInterface_AddTags_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogueService_OTServerWrapperInterface_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CatalogueService_OTServerWrapperInterface_Count_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogueService_OTServerWrapperInterfaceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogueService_OTServerWrapperInterface_Count_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogueService_OTServerWrapperInterfaceServer).Count(ctx, req.(*CatalogueService_OTServerWrapperInterface_Count_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogueService_OTServerWrapperInterface_DeleteSock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CatalogueService_OTServerWrapperInterface_DeleteSock_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogueService_OTServerWrapperInterfaceServer).DeleteSock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogueService_OTServerWrapperInterface_DeleteSock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogueService_OTServerWrapperInterfaceServer).DeleteSock(ctx, req.(*CatalogueService_OTServerWrapperInterface_DeleteSock_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogueService_OTServerWrapperInterface_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CatalogueService_OTServerWrapperInterface_Get_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogueService_OTServerWrapperInterfaceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogueService_OTServerWrapperInterface_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogueService_OTServerWrapperInterfaceServer).Get(ctx, req.(*CatalogueService_OTServerWrapperInterface_Get_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogueService_OTServerWrapperInterface_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CatalogueService_OTServerWrapperInterface_List_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogueService_OTServerWrapperInterfaceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogueService_OTServerWrapperInterface_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogueService_OTServerWrapperInterfaceServer).List(ctx, req.(*CatalogueService_OTServerWrapperInterface_List_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogueService_OTServerWrapperInterface_Tags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CatalogueService_OTServerWrapperInterface_Tags_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogueService_OTServerWrapperInterfaceServer).Tags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CatalogueService_OTServerWrapperInterface_Tags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogueService_OTServerWrapperInterfaceServer).Tags(ctx, req.(*CatalogueService_OTServerWrapperInterface_Tags_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// CatalogueService_OTServerWrapperInterface_ServiceDesc is the grpc.ServiceDesc for CatalogueService_OTServerWrapperInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CatalogueService_OTServerWrapperInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.CatalogueService_OTServerWrapperInterface",
	HandlerType: (*CatalogueService_OTServerWrapperInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSock",
			Handler:    _CatalogueService_OTServerWrapperInterface_AddSock_Handler,
		},
		{
			MethodName: "AddTags",
			Handler:    _CatalogueService_OTServerWrapperInterface_AddTags_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _CatalogueService_OTServerWrapperInterface_Count_Handler,
		},
		{
			MethodName: "DeleteSock",
			Handler:    _CatalogueService_OTServerWrapperInterface_DeleteSock_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CatalogueService_OTServerWrapperInterface_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CatalogueService_OTServerWrapperInterface_List_Handler,
		},
		{
			MethodName: "Tags",
			Handler:    _CatalogueService_OTServerWrapperInterface_Tags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "CatalogueService.proto",
}
