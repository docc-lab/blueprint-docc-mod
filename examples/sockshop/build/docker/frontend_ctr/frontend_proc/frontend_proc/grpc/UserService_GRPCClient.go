// Blueprint: Auto-generated by GRPC Plugin
package grpc

import (
	"context"
	"time"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
	"blueprint/goproc/frontend_proc/ot"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/user"
)

type UserService_GRPCClient struct {
	ot.UserService_OTServerWrapperInterface
	Client UserService_OTServerWrapperInterfaceClient // The actual GRPC-generated client
	Timeout time.Duration
}

func New_UserService_GRPCClient(ctx context.Context, serverAddress string) (*UserService_GRPCClient, error) {
	var opts []grpc.DialOption
	opts = append(opts, grpc.WithTransportCredentials(insecure.NewCredentials()))
	duration, err := time.ParseDuration("1s")
	if err != nil {
		return nil, err
	}
	opts = append(opts, grpc.WithTimeout(duration))
	conn, err := grpc.Dial(serverAddress, opts...)
	if err != nil {
		return nil, err
	}

	c := &UserService_GRPCClient{}
	c.Client = NewUserService_OTServerWrapperInterfaceClient(conn)
	c.Timeout = duration
	return c, nil
}


func (client *UserService_GRPCClient) Delete(ctx context.Context, entity string, id string, traceCtx string) (err error) {
	// Create and marshall the GRPC Request object
	req := &UserService_OTServerWrapperInterface_Delete_Request{}
	req.marshall(entity, id, traceCtx)

	// Configure the client-side request timeout
	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	// Make the remote call
	rsp, err := client.Client.Delete(ctx, req)
	if err == nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}

	 rsp.unmarshall()
	return
}

func (client *UserService_GRPCClient) GetAddresses(ctx context.Context, id string, traceCtx string) (ret0 []user.Address, err error) {
	// Create and marshall the GRPC Request object
	req := &UserService_OTServerWrapperInterface_GetAddresses_Request{}
	req.marshall(id, traceCtx)

	// Configure the client-side request timeout
	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	// Make the remote call
	rsp, err := client.Client.GetAddresses(ctx, req)
	if err == nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}

	ret0 =  rsp.unmarshall()
	return
}

func (client *UserService_GRPCClient) GetCards(ctx context.Context, cardid string, traceCtx string) (ret0 []user.Card, err error) {
	// Create and marshall the GRPC Request object
	req := &UserService_OTServerWrapperInterface_GetCards_Request{}
	req.marshall(cardid, traceCtx)

	// Configure the client-side request timeout
	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	// Make the remote call
	rsp, err := client.Client.GetCards(ctx, req)
	if err == nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}

	ret0 =  rsp.unmarshall()
	return
}

func (client *UserService_GRPCClient) GetUsers(ctx context.Context, id string, traceCtx string) (ret0 []user.User, err error) {
	// Create and marshall the GRPC Request object
	req := &UserService_OTServerWrapperInterface_GetUsers_Request{}
	req.marshall(id, traceCtx)

	// Configure the client-side request timeout
	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	// Make the remote call
	rsp, err := client.Client.GetUsers(ctx, req)
	if err == nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}

	ret0 =  rsp.unmarshall()
	return
}

func (client *UserService_GRPCClient) Login(ctx context.Context, username string, password string, traceCtx string) (ret0 user.User, err error) {
	// Create and marshall the GRPC Request object
	req := &UserService_OTServerWrapperInterface_Login_Request{}
	req.marshall(username, password, traceCtx)

	// Configure the client-side request timeout
	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	// Make the remote call
	rsp, err := client.Client.Login(ctx, req)
	if err == nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}

	ret0 =  rsp.unmarshall()
	return
}

func (client *UserService_GRPCClient) PostAddress(ctx context.Context, userid string, address user.Address, traceCtx string) (ret0 string, err error) {
	// Create and marshall the GRPC Request object
	req := &UserService_OTServerWrapperInterface_PostAddress_Request{}
	req.marshall(userid, address, traceCtx)

	// Configure the client-side request timeout
	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	// Make the remote call
	rsp, err := client.Client.PostAddress(ctx, req)
	if err == nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}

	ret0 =  rsp.unmarshall()
	return
}

func (client *UserService_GRPCClient) PostCard(ctx context.Context, userid string, card user.Card, traceCtx string) (ret0 string, err error) {
	// Create and marshall the GRPC Request object
	req := &UserService_OTServerWrapperInterface_PostCard_Request{}
	req.marshall(userid, card, traceCtx)

	// Configure the client-side request timeout
	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	// Make the remote call
	rsp, err := client.Client.PostCard(ctx, req)
	if err == nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}

	ret0 =  rsp.unmarshall()
	return
}

func (client *UserService_GRPCClient) PostUser(ctx context.Context, user user.User, traceCtx string) (ret0 string, err error) {
	// Create and marshall the GRPC Request object
	req := &UserService_OTServerWrapperInterface_PostUser_Request{}
	req.marshall(user, traceCtx)

	// Configure the client-side request timeout
	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	// Make the remote call
	rsp, err := client.Client.PostUser(ctx, req)
	if err == nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}

	ret0 =  rsp.unmarshall()
	return
}

func (client *UserService_GRPCClient) Register(ctx context.Context, username string, password string, email string, first string, last string, traceCtx string) (ret0 string, err error) {
	// Create and marshall the GRPC Request object
	req := &UserService_OTServerWrapperInterface_Register_Request{}
	req.marshall(username, password, email, first, last, traceCtx)

	// Configure the client-side request timeout
	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	// Make the remote call
	rsp, err := client.Client.Register(ctx, req)
	if err == nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}

	ret0 =  rsp.unmarshall()
	return
}

