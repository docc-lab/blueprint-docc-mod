// Blueprint: Auto-generated by GRPC Plugin
package grpc

import (
	"context"
	"time"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
	"blueprint/goproc/frontend_proc/ot"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/catalogue"
)

type CatalogueService_GRPCClient struct {
	ot.CatalogueService_OTServerWrapperInterface
	Client CatalogueService_OTServerWrapperInterfaceClient // The actual GRPC-generated client
	Timeout time.Duration
}

func New_CatalogueService_GRPCClient(ctx context.Context, serverAddress string) (*CatalogueService_GRPCClient, error) {
	var opts []grpc.DialOption
	opts = append(opts, grpc.WithTransportCredentials(insecure.NewCredentials()))
	duration, err := time.ParseDuration("1s")
	if err != nil {
		return nil, err
	}
	opts = append(opts, grpc.WithTimeout(duration))
	conn, err := grpc.Dial(serverAddress, opts...)
	if err != nil {
		return nil, err
	}

	c := &CatalogueService_GRPCClient{}
	c.Client = NewCatalogueService_OTServerWrapperInterfaceClient(conn)
	c.Timeout = duration
	return c, nil
}


func (client *CatalogueService_GRPCClient) AddSock(ctx context.Context, sock catalogue.Sock, traceCtx string) (ret0 string, err error) {
	// Create and marshall the GRPC Request object
	req := &CatalogueService_OTServerWrapperInterface_AddSock_Request{}
	req.marshall(sock, traceCtx)

	// Configure the client-side request timeout
	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	// Make the remote call
	rsp, err := client.Client.AddSock(ctx, req)
	if err == nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}

	ret0 =  rsp.unmarshall()
	return
}

func (client *CatalogueService_GRPCClient) AddTags(ctx context.Context, tags []string, traceCtx string) (err error) {
	// Create and marshall the GRPC Request object
	req := &CatalogueService_OTServerWrapperInterface_AddTags_Request{}
	req.marshall(tags, traceCtx)

	// Configure the client-side request timeout
	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	// Make the remote call
	rsp, err := client.Client.AddTags(ctx, req)
	if err == nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}

	 rsp.unmarshall()
	return
}

func (client *CatalogueService_GRPCClient) Count(ctx context.Context, tags []string, traceCtx string) (ret0 int, err error) {
	// Create and marshall the GRPC Request object
	req := &CatalogueService_OTServerWrapperInterface_Count_Request{}
	req.marshall(tags, traceCtx)

	// Configure the client-side request timeout
	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	// Make the remote call
	rsp, err := client.Client.Count(ctx, req)
	if err == nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}

	ret0 =  rsp.unmarshall()
	return
}

func (client *CatalogueService_GRPCClient) DeleteSock(ctx context.Context, id string, traceCtx string) (err error) {
	// Create and marshall the GRPC Request object
	req := &CatalogueService_OTServerWrapperInterface_DeleteSock_Request{}
	req.marshall(id, traceCtx)

	// Configure the client-side request timeout
	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	// Make the remote call
	rsp, err := client.Client.DeleteSock(ctx, req)
	if err == nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}

	 rsp.unmarshall()
	return
}

func (client *CatalogueService_GRPCClient) Get(ctx context.Context, id string, traceCtx string) (ret0 catalogue.Sock, err error) {
	// Create and marshall the GRPC Request object
	req := &CatalogueService_OTServerWrapperInterface_Get_Request{}
	req.marshall(id, traceCtx)

	// Configure the client-side request timeout
	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	// Make the remote call
	rsp, err := client.Client.Get(ctx, req)
	if err == nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}

	ret0 =  rsp.unmarshall()
	return
}

func (client *CatalogueService_GRPCClient) List(ctx context.Context, tags []string, order string, pageNum int, pageSize int, traceCtx string) (ret0 []catalogue.Sock, err error) {
	// Create and marshall the GRPC Request object
	req := &CatalogueService_OTServerWrapperInterface_List_Request{}
	req.marshall(tags, order, pageNum, pageSize, traceCtx)

	// Configure the client-side request timeout
	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	// Make the remote call
	rsp, err := client.Client.List(ctx, req)
	if err == nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}

	ret0 =  rsp.unmarshall()
	return
}

func (client *CatalogueService_GRPCClient) Tags(ctx context.Context, traceCtx string) (ret0 []string, err error) {
	// Create and marshall the GRPC Request object
	req := &CatalogueService_OTServerWrapperInterface_Tags_Request{}
	req.marshall(traceCtx)

	// Configure the client-side request timeout
	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	// Make the remote call
	rsp, err := client.Client.Tags(ctx, req)
	if err == nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}

	ret0 =  rsp.unmarshall()
	return
}

