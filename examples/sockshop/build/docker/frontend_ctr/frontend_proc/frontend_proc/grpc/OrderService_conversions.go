// Blueprint: Auto-generated by GRPC Plugin marshallgen.go
package grpc

import (
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/order"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/user"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/cart"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/shipping"
)

// Client-side function to pack OrderService_OTServerWrapperInterface.GetOrder args into a GRPC OrderService_OTServerWrapperInterface_GetOrder_Request struct
func (msg *OrderService_OTServerWrapperInterface_GetOrder_Request) marshall(orderID string, traceCtx string) *OrderService_OTServerWrapperInterface_GetOrder_Request {
	msg.OrderID = string(orderID)
	msg.TraceCtx = string(traceCtx)
	return msg
}

// Server-side function to unpack OrderService_OTServerWrapperInterface.GetOrder args from a GRPC OrderService_OTServerWrapperInterface_GetOrder_Request struct
func (msg *OrderService_OTServerWrapperInterface_GetOrder_Request) unmarshall() (orderID string, traceCtx string) {
	orderID = string(msg.OrderID)
	traceCtx = string(msg.TraceCtx)
	return
}

// Server-side function to pack OrderService_OTServerWrapperInterface.GetOrder retvals into a GRPC OrderService_OTServerWrapperInterface_GetOrder_Response struct
func (msg *OrderService_OTServerWrapperInterface_GetOrder_Response) marshall(ret0 order.Order) *OrderService_OTServerWrapperInterface_GetOrder_Response {
	msg.Ret0 = new(OrderService_Order).marshall(&ret0)
	return msg
}

// Client-side function to unpack OrderService_OTServerWrapperInterface.GetOrder retvals from a GRPC OrderService_OTServerWrapperInterface_GetOrder_Response struct
func (msg *OrderService_OTServerWrapperInterface_GetOrder_Response) unmarshall() (ret0 order.Order) {
	msg.Ret0.unmarshall(&ret0)
	return
}

// Client-side function to pack OrderService_OTServerWrapperInterface.GetOrders args into a GRPC OrderService_OTServerWrapperInterface_GetOrders_Request struct
func (msg *OrderService_OTServerWrapperInterface_GetOrders_Request) marshall(customerID string, traceCtx string) *OrderService_OTServerWrapperInterface_GetOrders_Request {
	msg.CustomerID = string(customerID)
	msg.TraceCtx = string(traceCtx)
	return msg
}

// Server-side function to unpack OrderService_OTServerWrapperInterface.GetOrders args from a GRPC OrderService_OTServerWrapperInterface_GetOrders_Request struct
func (msg *OrderService_OTServerWrapperInterface_GetOrders_Request) unmarshall() (customerID string, traceCtx string) {
	customerID = string(msg.CustomerID)
	traceCtx = string(msg.TraceCtx)
	return
}

// Server-side function to pack OrderService_OTServerWrapperInterface.GetOrders retvals into a GRPC OrderService_OTServerWrapperInterface_GetOrders_Response struct
func (msg *OrderService_OTServerWrapperInterface_GetOrders_Response) marshall(ret0 []order.Order) *OrderService_OTServerWrapperInterface_GetOrders_Response {
	for _, v := range ret0 { msg.Ret0 = append(msg.Ret0, new(OrderService_Order).marshall(&v)) }
	return msg
}

// Client-side function to unpack OrderService_OTServerWrapperInterface.GetOrders retvals from a GRPC OrderService_OTServerWrapperInterface_GetOrders_Response struct
func (msg *OrderService_OTServerWrapperInterface_GetOrders_Response) unmarshall() (ret0 []order.Order) {
	
	ret0 = make([]order.Order, len(msg.Ret0))
	for i, v := range msg.Ret0 {
		v.unmarshall(&ret0[i])
	}
	return
}

// Client-side function to pack OrderService_OTServerWrapperInterface.NewOrder args into a GRPC OrderService_OTServerWrapperInterface_NewOrder_Request struct
func (msg *OrderService_OTServerWrapperInterface_NewOrder_Request) marshall(customerID string, addressID string, cardID string, cartID string, traceCtx string) *OrderService_OTServerWrapperInterface_NewOrder_Request {
	msg.CustomerID = string(customerID)
	msg.AddressID = string(addressID)
	msg.CardID = string(cardID)
	msg.CartID = string(cartID)
	msg.TraceCtx = string(traceCtx)
	return msg
}

// Server-side function to unpack OrderService_OTServerWrapperInterface.NewOrder args from a GRPC OrderService_OTServerWrapperInterface_NewOrder_Request struct
func (msg *OrderService_OTServerWrapperInterface_NewOrder_Request) unmarshall() (customerID string, addressID string, cardID string, cartID string, traceCtx string) {
	customerID = string(msg.CustomerID)
	addressID = string(msg.AddressID)
	cardID = string(msg.CardID)
	cartID = string(msg.CartID)
	traceCtx = string(msg.TraceCtx)
	return
}

// Server-side function to pack OrderService_OTServerWrapperInterface.NewOrder retvals into a GRPC OrderService_OTServerWrapperInterface_NewOrder_Response struct
func (msg *OrderService_OTServerWrapperInterface_NewOrder_Response) marshall(ret0 order.Order) *OrderService_OTServerWrapperInterface_NewOrder_Response {
	msg.Ret0 = new(OrderService_Order).marshall(&ret0)
	return msg
}

// Client-side function to unpack OrderService_OTServerWrapperInterface.NewOrder retvals from a GRPC OrderService_OTServerWrapperInterface_NewOrder_Response struct
func (msg *OrderService_OTServerWrapperInterface_NewOrder_Response) unmarshall() (ret0 order.Order) {
	msg.Ret0.unmarshall(&ret0)
	return
}


// Utility function to pack cart.Item into a GRPC OrderService_Item message
func (msg *OrderService_Item) marshall(obj *cart.Item) *OrderService_Item {
	msg.ID = string(obj.ID)
	msg.Quantity = int64(obj.Quantity)
	msg.UnitPrice = (obj.UnitPrice)
	return msg
}

// Utility function to unpack cart.Item from a GRPC OrderService_Item message
func (msg *OrderService_Item) unmarshall(obj *cart.Item) {
	obj.ID = string(msg.ID)
	obj.Quantity = int(msg.Quantity)
	obj.UnitPrice = float32(msg.UnitPrice)
}

// Utility function to pack order.Order into a GRPC OrderService_Order message
func (msg *OrderService_Order) marshall(obj *order.Order) *OrderService_Order {
	msg.ID = string(obj.ID)
	msg.CustomerID = string(obj.CustomerID)
	msg.Customer = new(OrderService_User).marshall(&obj.Customer)
	msg.Address = new(OrderService_Address).marshall(&obj.Address)
	msg.Card = new(OrderService_Card).marshall(&obj.Card)
	for _, v := range obj.Items { msg.Items = append(msg.Items, new(OrderService_Item).marshall(&v)) }
	msg.Shipment = new(OrderService_Shipment).marshall(&obj.Shipment)
	msg.Date = string(obj.Date)
	msg.Total = (obj.Total)
	return msg
}

// Utility function to unpack order.Order from a GRPC OrderService_Order message
func (msg *OrderService_Order) unmarshall(obj *order.Order) {
	obj.ID = string(msg.ID)
	obj.CustomerID = string(msg.CustomerID)
	msg.Customer.unmarshall(&obj.Customer)
	msg.Address.unmarshall(&obj.Address)
	msg.Card.unmarshall(&obj.Card)
	
	obj.Items = make([]cart.Item, len(msg.Items))
	for i, v := range msg.Items {
		v.unmarshall(&obj.Items[i])
	}
	msg.Shipment.unmarshall(&obj.Shipment)
	obj.Date = string(msg.Date)
	obj.Total = float32(msg.Total)
}

// Utility function to pack shipping.Shipment into a GRPC OrderService_Shipment message
func (msg *OrderService_Shipment) marshall(obj *shipping.Shipment) *OrderService_Shipment {
	msg.ID = string(obj.ID)
	msg.Name = string(obj.Name)
	msg.Status = string(obj.Status)
	return msg
}

// Utility function to unpack shipping.Shipment from a GRPC OrderService_Shipment message
func (msg *OrderService_Shipment) unmarshall(obj *shipping.Shipment) {
	obj.ID = string(msg.ID)
	obj.Name = string(msg.Name)
	obj.Status = string(msg.Status)
}

// Utility function to pack user.Address into a GRPC OrderService_Address message
func (msg *OrderService_Address) marshall(obj *user.Address) *OrderService_Address {
	msg.Street = string(obj.Street)
	msg.Number = string(obj.Number)
	msg.Country = string(obj.Country)
	msg.City = string(obj.City)
	msg.PostCode = string(obj.PostCode)
	msg.ID = string(obj.ID)
	return msg
}

// Utility function to unpack user.Address from a GRPC OrderService_Address message
func (msg *OrderService_Address) unmarshall(obj *user.Address) {
	obj.Street = string(msg.Street)
	obj.Number = string(msg.Number)
	obj.Country = string(msg.Country)
	obj.City = string(msg.City)
	obj.PostCode = string(msg.PostCode)
	obj.ID = string(msg.ID)
}

// Utility function to pack user.Card into a GRPC OrderService_Card message
func (msg *OrderService_Card) marshall(obj *user.Card) *OrderService_Card {
	msg.LongNum = string(obj.LongNum)
	msg.Expires = string(obj.Expires)
	msg.CCV = string(obj.CCV)
	msg.ID = string(obj.ID)
	return msg
}

// Utility function to unpack user.Card from a GRPC OrderService_Card message
func (msg *OrderService_Card) unmarshall(obj *user.Card) {
	obj.LongNum = string(msg.LongNum)
	obj.Expires = string(msg.Expires)
	obj.CCV = string(msg.CCV)
	obj.ID = string(msg.ID)
}

// Utility function to pack user.User into a GRPC OrderService_User message
func (msg *OrderService_User) marshall(obj *user.User) *OrderService_User {
	msg.FirstName = string(obj.FirstName)
	msg.LastName = string(obj.LastName)
	msg.Email = string(obj.Email)
	msg.Username = string(obj.Username)
	msg.Password = string(obj.Password)
	for _, v := range obj.Addresses { msg.Addresses = append(msg.Addresses, new(OrderService_Address).marshall(&v)) }
	for _, v := range obj.Cards { msg.Cards = append(msg.Cards, new(OrderService_Card).marshall(&v)) }
	msg.UserID = string(obj.UserID)
	msg.Salt = string(obj.Salt)
	return msg
}

// Utility function to unpack user.User from a GRPC OrderService_User message
func (msg *OrderService_User) unmarshall(obj *user.User) {
	obj.FirstName = string(msg.FirstName)
	obj.LastName = string(msg.LastName)
	obj.Email = string(msg.Email)
	obj.Username = string(msg.Username)
	obj.Password = string(msg.Password)
	
	obj.Addresses = make([]user.Address, len(msg.Addresses))
	for i, v := range msg.Addresses {
		v.unmarshall(&obj.Addresses[i])
	}
	
	obj.Cards = make([]user.Card, len(msg.Cards))
	for i, v := range msg.Cards {
		v.unmarshall(&obj.Cards[i])
	}
	obj.UserID = string(msg.UserID)
	obj.Salt = string(msg.Salt)
}

