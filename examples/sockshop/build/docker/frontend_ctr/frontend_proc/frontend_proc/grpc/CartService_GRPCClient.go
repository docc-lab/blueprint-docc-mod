// Blueprint: Auto-generated by GRPC Plugin
package grpc

import (
	"blueprint/goproc/frontend_proc/ot"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/cart"
	"context"
	"time"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
)

type CartService_GRPCClient struct {
	ot.CartService_OTServerWrapperInterface
	Client CartService_OTServerWrapperInterfaceClient // The actual GRPC-generated client
	Timeout time.Duration
}

func New_CartService_GRPCClient(ctx context.Context, serverAddress string) (*CartService_GRPCClient, error) {
	var opts []grpc.DialOption
	opts = append(opts, grpc.WithTransportCredentials(insecure.NewCredentials()))
	duration, err := time.ParseDuration("1s")
	if err != nil {
		return nil, err
	}
	opts = append(opts, grpc.WithTimeout(duration))
	conn, err := grpc.Dial(serverAddress, opts...)
	if err != nil {
		return nil, err
	}

	c := &CartService_GRPCClient{}
	c.Client = NewCartService_OTServerWrapperInterfaceClient(conn)
	c.Timeout = duration
	return c, nil
}


func (client *CartService_GRPCClient) AddItem(ctx context.Context, customerID string, item cart.Item, traceCtx string) (ret0 cart.Item, err error) {
	// Create and marshall the GRPC Request object
	req := &CartService_OTServerWrapperInterface_AddItem_Request{}
	req.marshall(customerID, item, traceCtx)

	// Configure the client-side request timeout
	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	// Make the remote call
	rsp, err := client.Client.AddItem(ctx, req)
	if err == nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}

	ret0 =  rsp.unmarshall()
	return
}

func (client *CartService_GRPCClient) DeleteCart(ctx context.Context, customerID string, traceCtx string) (err error) {
	// Create and marshall the GRPC Request object
	req := &CartService_OTServerWrapperInterface_DeleteCart_Request{}
	req.marshall(customerID, traceCtx)

	// Configure the client-side request timeout
	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	// Make the remote call
	rsp, err := client.Client.DeleteCart(ctx, req)
	if err == nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}

	 rsp.unmarshall()
	return
}

func (client *CartService_GRPCClient) GetCart(ctx context.Context, customerID string, traceCtx string) (ret0 []cart.Item, err error) {
	// Create and marshall the GRPC Request object
	req := &CartService_OTServerWrapperInterface_GetCart_Request{}
	req.marshall(customerID, traceCtx)

	// Configure the client-side request timeout
	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	// Make the remote call
	rsp, err := client.Client.GetCart(ctx, req)
	if err == nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}

	ret0 =  rsp.unmarshall()
	return
}

func (client *CartService_GRPCClient) GetItem(ctx context.Context, customerID string, itemID string, traceCtx string) (ret0 cart.Item, err error) {
	// Create and marshall the GRPC Request object
	req := &CartService_OTServerWrapperInterface_GetItem_Request{}
	req.marshall(customerID, itemID, traceCtx)

	// Configure the client-side request timeout
	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	// Make the remote call
	rsp, err := client.Client.GetItem(ctx, req)
	if err == nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}

	ret0 =  rsp.unmarshall()
	return
}

func (client *CartService_GRPCClient) MergeCarts(ctx context.Context, customerID string, sessionID string, traceCtx string) (err error) {
	// Create and marshall the GRPC Request object
	req := &CartService_OTServerWrapperInterface_MergeCarts_Request{}
	req.marshall(customerID, sessionID, traceCtx)

	// Configure the client-side request timeout
	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	// Make the remote call
	rsp, err := client.Client.MergeCarts(ctx, req)
	if err == nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}

	 rsp.unmarshall()
	return
}

func (client *CartService_GRPCClient) RemoveItem(ctx context.Context, customerID string, itemID string, traceCtx string) (err error) {
	// Create and marshall the GRPC Request object
	req := &CartService_OTServerWrapperInterface_RemoveItem_Request{}
	req.marshall(customerID, itemID, traceCtx)

	// Configure the client-side request timeout
	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	// Make the remote call
	rsp, err := client.Client.RemoveItem(ctx, req)
	if err == nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}

	 rsp.unmarshall()
	return
}

func (client *CartService_GRPCClient) UpdateItem(ctx context.Context, customerID string, item cart.Item, traceCtx string) (err error) {
	// Create and marshall the GRPC Request object
	req := &CartService_OTServerWrapperInterface_UpdateItem_Request{}
	req.marshall(customerID, item, traceCtx)

	// Configure the client-side request timeout
	ctx, cancel := context.WithTimeout(ctx, client.Timeout)
	defer cancel()

	// Make the remote call
	rsp, err := client.Client.UpdateItem(ctx, req)
	if err == nil {
		err = ctx.Err()
	}
	if err != nil {
		return
	}

	 rsp.unmarshall()
	return
}

