// Blueprint: Auto-generated by XTrace Plugin
package ot

import (
	"context"
	"go.opentelemetry.io/otel/trace"
	"github.com/blueprint-uservices/blueprint/runtime/core/backend"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/shipping"
)

type ShippingService_OTServerWrapperInterface interface {
	GetShipment(ctx context.Context, id string, traceCtx string) (shipping.Shipment, error)
	PostShipping(ctx context.Context, shipment shipping.Shipment, traceCtx string) (shipping.Shipment, error)
	UpdateStatus(ctx context.Context, id string, status string, traceCtx string) (error)
	
}

type ShippingService_OTServerWrapper struct {
	Service shipping.ShippingService
	CollClient backend.Tracer
}

func New_ShippingService_OTServerWrapper(ctx context.Context, service shipping.ShippingService, coll_client backend.Tracer) (*ShippingService_OTServerWrapper, error) {
	handler := &ShippingService_OTServerWrapper{}
	handler.Service = service
	handler.CollClient = coll_client
	return handler, nil
}


func (handler *ShippingService_OTServerWrapper) GetShipment(ctx context.Context, id string, traceCtx string) (ret0 shipping.Shipment, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("ShippingService")
	ctx, span := tr.Start(ctx, "ShippingServiceServer_GetShipment")
	defer span.End()
	ret0, err = handler.Service.GetShipment(ctx, id)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *ShippingService_OTServerWrapper) PostShipping(ctx context.Context, shipment shipping.Shipment, traceCtx string) (ret0 shipping.Shipment, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("ShippingService")
	ctx, span := tr.Start(ctx, "ShippingServiceServer_PostShipping")
	defer span.End()
	ret0, err = handler.Service.PostShipping(ctx, shipment)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *ShippingService_OTServerWrapper) UpdateStatus(ctx context.Context, id string, status string, traceCtx string) (err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("ShippingService")
	ctx, span := tr.Start(ctx, "ShippingServiceServer_UpdateStatus")
	defer span.End()
	err = handler.Service.UpdateStatus(ctx, id, status)
	if err != nil {
		span.RecordError(err)
	}
	return
}

