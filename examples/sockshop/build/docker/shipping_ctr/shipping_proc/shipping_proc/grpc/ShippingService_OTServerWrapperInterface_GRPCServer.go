// Blueprint: Auto-generated by GRPC Plugin
package grpc

import (
	"google.golang.org/grpc"
	"blueprint/goproc/shipping_proc/ot"
	"context"
	"net"
)

type ShippingService_GRPCServerHandler struct {
	UnimplementedShippingService_OTServerWrapperInterfaceServer
	Service ot.ShippingService_OTServerWrapperInterface
	Address string
}

func New_ShippingService_GRPCServerHandler(ctx context.Context, service ot.ShippingService_OTServerWrapperInterface, serverAddress string) (*ShippingService_GRPCServerHandler, error) {
	handler := &ShippingService_GRPCServerHandler{}
	handler.Service = service
	handler.Address = serverAddress
	return handler, nil
}

// Blueprint: Run is called automatically in a separate goroutine by runtime/plugins/golang/di.go
func (handler *ShippingService_GRPCServerHandler) Run(ctx context.Context) error {
	lis, err := net.Listen("tcp", handler.Address)
	if err != nil {
		return err
	}

	s := grpc.NewServer()
	RegisterShippingService_OTServerWrapperInterfaceServer(s, handler)

	go func() {
		select {
		case <-ctx.Done():
			s.GracefulStop()
		}
	}()

	return s.Serve(lis)
}


func (handler *ShippingService_GRPCServerHandler) GetShipment(ctx context.Context, req *ShippingService_OTServerWrapperInterface_GetShipment_Request) (*ShippingService_OTServerWrapperInterface_GetShipment_Response, error) {
	id, traceCtx := req.unmarshall()
	ret0, err := handler.Service.GetShipment(ctx, id, traceCtx)
	if err != nil {
		return nil, err
	}

	rsp := &ShippingService_OTServerWrapperInterface_GetShipment_Response{}
	rsp.marshall(ret0)
	return rsp, nil
}

func (handler *ShippingService_GRPCServerHandler) PostShipping(ctx context.Context, req *ShippingService_OTServerWrapperInterface_PostShipping_Request) (*ShippingService_OTServerWrapperInterface_PostShipping_Response, error) {
	shipment, traceCtx := req.unmarshall()
	ret0, err := handler.Service.PostShipping(ctx, shipment, traceCtx)
	if err != nil {
		return nil, err
	}

	rsp := &ShippingService_OTServerWrapperInterface_PostShipping_Response{}
	rsp.marshall(ret0)
	return rsp, nil
}

func (handler *ShippingService_GRPCServerHandler) UpdateStatus(ctx context.Context, req *ShippingService_OTServerWrapperInterface_UpdateStatus_Request) (*ShippingService_OTServerWrapperInterface_UpdateStatus_Response, error) {
	id, status, traceCtx := req.unmarshall()
	err := handler.Service.UpdateStatus(ctx, id, status, traceCtx)
	if err != nil {
		return nil, err
	}

	rsp := &ShippingService_OTServerWrapperInterface_UpdateStatus_Response{}
	rsp.marshall()
	return rsp, nil
}

