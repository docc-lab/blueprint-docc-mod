// Package main is auto-generated by gogen/namespacebuilder.go
//
// It provides funcs for instantiating the payment_proc namespace.
//
// To instantiate the payment_proc namespace, first call [New_payment_proc] and then either call 
// [Build] or [BuildWithParent].
// 
// See [golang.NamespaceBuilder] docs for more information about the behavior of [Build]
package main

import (
	"github.com/blueprint-uservices/blueprint/runtime/plugins/slogger"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/payment"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/tracingagent"
	"github.com/blueprint-uservices/blueprint/runtime/core/backend"
	"blueprint/goproc/payment_proc/ot"
	"blueprint/goproc/payment_proc/grpc"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/golang"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/opentelemetry"
)

// Initializes the payment_proc namespace by defining all of the nodes that run
// within the namespace.
//
// [Build] or [BuildWithParent] must be called on the return value of this func
// to actually build and run the nodes in the namespace.
func New_payment_proc(name string) *golang.NamespaceBuilder {
	b := golang.NewNamespaceBuilder(name)
	set_payment_proc_Args(b)
	set_payment_proc_Instances(b)
	set_payment_proc_Definitions(b)
	return b
}

// payment_proc requires that its arguments are either:
//  - explicitly set with [golang.NamespaceBuilder.Set]
//  - passed on the command line (if built using [golang.NamespaceBuilder.Build])
//  - are defined in parent (if built using [golang.NamespaceBuilder.BuildWithParent])
//
// The following arguments will be eagerly checked and building the namespace
// will fail if they haven't been provided:
//   payment_service.grpc.bind_addr
//
// The following arguments are optional and a failure will only occur if the client
// tries to build a node that needs the argument to be set
func set_payment_proc_Args(b *golang.NamespaceBuilder) {
	b.Required("payment_service.grpc.bind_addr", "Argument generated by Blueprint IR: payment_service.grpc.bind_addr = AddressConfig()")
}

// When the payment_proc namespace is built it will automatically instantiate
// the following nodes:
//   payment_proc.stdoutmetriccollector
//   payment_proc.logger
//   payment_service
//   tracing_agent.ctr
//   tracing_agent
//   payment_service.server.ot
//   payment_service.grpc_server
func set_payment_proc_Instances(b *golang.NamespaceBuilder) {
	b.Instantiate("payment_proc.stdoutmetriccollector")
	b.Instantiate("payment_proc.logger")
	b.Instantiate("payment_service")
	b.Instantiate("tracing_agent.ctr")
	b.Instantiate("tracing_agent")
	b.Instantiate("payment_service.server.ot")
	b.Instantiate("payment_service.grpc_server")
}

// The payment_proc namespace contains definitions for instantiating
// the following nodes:
//   payment_proc.logger
//   payment_proc.stdoutmetriccollector
//   payment_service
//   payment_service.grpc_server
//   payment_service.server.ot
//   tracing_agent
//   tracing_agent.ctr
func set_payment_proc_Definitions(b *golang.NamespaceBuilder) {
	b.Define("payment_proc.logger", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		return slogger.NewSLogger(n.Context())
	})
	
	b.Define("payment_proc.stdoutmetriccollector", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		return opentelemetry.NewStdoutMetricCollector(n.Context())
	})
	
	b.Define("payment_service", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		return payment.NewPaymentService(n.Context(), "500")
	})
	
	b.Define("payment_service.grpc_server", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var service ot.PaymentService_OTServerWrapperInterface
		if err := n.Get("payment_service.server.ot", &service); err != nil {
			return nil, err
		}
		
		var serverAddr string
		if err := n.Get("payment_service.grpc.bind_addr", &serverAddr); err != nil {
			return nil, err
		}
		
		return grpc.New_PaymentService_GRPCServerHandler(n.Context(), service, serverAddr)
	})
	
	b.Define("payment_service.server.ot", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var service payment.PaymentService
		if err := n.Get("payment_service", &service); err != nil {
			return nil, err
		}
		
		var otCollectorClient backend.Tracer
		if err := n.Get("tracing_agent", &otCollectorClient); err != nil {
			return nil, err
		}
		
		return ot.New_PaymentService_OTServerWrapper(n.Context(), service, otCollectorClient)
	})
	
	b.Define("tracing_agent", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var agent tracingagent.TracingAgentService
		if err := n.Get("tracing_agent.ctr", &agent); err != nil {
			return nil, err
		}
		
		return tracingagent.NewTracingAgentClient(n.Context(), agent)
	})
	
	b.Define("tracing_agent.ctr", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		return tracingagent.NewTracingAgent(n.Context())
	})
	
}
