// Blueprint: Auto-generated by XTrace Plugin
package ot

import (
	"context"
	"go.opentelemetry.io/otel/trace"
	"github.com/blueprint-uservices/blueprint/runtime/core/backend"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/catalogue"
)

type CatalogueService_OTServerWrapperInterface interface {
	AddSock(ctx context.Context, sock catalogue.Sock, traceCtx string) (string, error)
	AddTags(ctx context.Context, tags []string, traceCtx string) (error)
	Count(ctx context.Context, tags []string, traceCtx string) (int, error)
	DeleteSock(ctx context.Context, id string, traceCtx string) (error)
	Get(ctx context.Context, id string, traceCtx string) (catalogue.Sock, error)
	List(ctx context.Context, tags []string, order string, pageNum int, pageSize int, traceCtx string) ([]catalogue.Sock, error)
	Tags(ctx context.Context, traceCtx string) ([]string, error)
	
}

type CatalogueService_OTServerWrapper struct {
	Service catalogue.CatalogueService
	CollClient backend.Tracer
}

func New_CatalogueService_OTServerWrapper(ctx context.Context, service catalogue.CatalogueService, coll_client backend.Tracer) (*CatalogueService_OTServerWrapper, error) {
	handler := &CatalogueService_OTServerWrapper{}
	handler.Service = service
	handler.CollClient = coll_client
	return handler, nil
}


func (handler *CatalogueService_OTServerWrapper) AddSock(ctx context.Context, sock catalogue.Sock, traceCtx string) (ret0 string, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("CatalogueService")
	ctx, span := tr.Start(ctx, "CatalogueServiceServer_AddSock")
	defer span.End()
	ret0, err = handler.Service.AddSock(ctx, sock)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *CatalogueService_OTServerWrapper) AddTags(ctx context.Context, tags []string, traceCtx string) (err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("CatalogueService")
	ctx, span := tr.Start(ctx, "CatalogueServiceServer_AddTags")
	defer span.End()
	err = handler.Service.AddTags(ctx, tags)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *CatalogueService_OTServerWrapper) Count(ctx context.Context, tags []string, traceCtx string) (ret0 int, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("CatalogueService")
	ctx, span := tr.Start(ctx, "CatalogueServiceServer_Count")
	defer span.End()
	ret0, err = handler.Service.Count(ctx, tags)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *CatalogueService_OTServerWrapper) DeleteSock(ctx context.Context, id string, traceCtx string) (err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("CatalogueService")
	ctx, span := tr.Start(ctx, "CatalogueServiceServer_DeleteSock")
	defer span.End()
	err = handler.Service.DeleteSock(ctx, id)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *CatalogueService_OTServerWrapper) Get(ctx context.Context, id string, traceCtx string) (ret0 catalogue.Sock, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("CatalogueService")
	ctx, span := tr.Start(ctx, "CatalogueServiceServer_Get")
	defer span.End()
	ret0, err = handler.Service.Get(ctx, id)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *CatalogueService_OTServerWrapper) List(ctx context.Context, tags []string, order string, pageNum int, pageSize int, traceCtx string) (ret0 []catalogue.Sock, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("CatalogueService")
	ctx, span := tr.Start(ctx, "CatalogueServiceServer_List")
	defer span.End()
	ret0, err = handler.Service.List(ctx, tags, order, pageNum, pageSize)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *CatalogueService_OTServerWrapper) Tags(ctx context.Context, traceCtx string) (ret0 []string, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("CatalogueService")
	ctx, span := tr.Start(ctx, "CatalogueServiceServer_Tags")
	defer span.End()
	ret0, err = handler.Service.Tags(ctx)
	if err != nil {
		span.RecordError(err)
	}
	return
}

