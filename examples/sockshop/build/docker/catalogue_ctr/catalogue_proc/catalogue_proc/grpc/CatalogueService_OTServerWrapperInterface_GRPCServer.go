// Blueprint: Auto-generated by GRPC Plugin
package grpc

import (
	"context"
	"net"
	"google.golang.org/grpc"
	"blueprint/goproc/catalogue_proc/ot"
)

type CatalogueService_GRPCServerHandler struct {
	UnimplementedCatalogueService_OTServerWrapperInterfaceServer
	Service ot.CatalogueService_OTServerWrapperInterface
	Address string
}

func New_CatalogueService_GRPCServerHandler(ctx context.Context, service ot.CatalogueService_OTServerWrapperInterface, serverAddress string) (*CatalogueService_GRPCServerHandler, error) {
	handler := &CatalogueService_GRPCServerHandler{}
	handler.Service = service
	handler.Address = serverAddress
	return handler, nil
}

// Blueprint: Run is called automatically in a separate goroutine by runtime/plugins/golang/di.go
func (handler *CatalogueService_GRPCServerHandler) Run(ctx context.Context) error {
	lis, err := net.Listen("tcp", handler.Address)
	if err != nil {
		return err
	}

	s := grpc.NewServer()
	RegisterCatalogueService_OTServerWrapperInterfaceServer(s, handler)

	go func() {
		select {
		case <-ctx.Done():
			s.GracefulStop()
		}
	}()

	return s.Serve(lis)
}


func (handler *CatalogueService_GRPCServerHandler) AddSock(ctx context.Context, req *CatalogueService_OTServerWrapperInterface_AddSock_Request) (*CatalogueService_OTServerWrapperInterface_AddSock_Response, error) {
	sock, traceCtx := req.unmarshall()
	ret0, err := handler.Service.AddSock(ctx, sock, traceCtx)
	if err != nil {
		return nil, err
	}

	rsp := &CatalogueService_OTServerWrapperInterface_AddSock_Response{}
	rsp.marshall(ret0)
	return rsp, nil
}

func (handler *CatalogueService_GRPCServerHandler) AddTags(ctx context.Context, req *CatalogueService_OTServerWrapperInterface_AddTags_Request) (*CatalogueService_OTServerWrapperInterface_AddTags_Response, error) {
	tags, traceCtx := req.unmarshall()
	err := handler.Service.AddTags(ctx, tags, traceCtx)
	if err != nil {
		return nil, err
	}

	rsp := &CatalogueService_OTServerWrapperInterface_AddTags_Response{}
	rsp.marshall()
	return rsp, nil
}

func (handler *CatalogueService_GRPCServerHandler) Count(ctx context.Context, req *CatalogueService_OTServerWrapperInterface_Count_Request) (*CatalogueService_OTServerWrapperInterface_Count_Response, error) {
	tags, traceCtx := req.unmarshall()
	ret0, err := handler.Service.Count(ctx, tags, traceCtx)
	if err != nil {
		return nil, err
	}

	rsp := &CatalogueService_OTServerWrapperInterface_Count_Response{}
	rsp.marshall(ret0)
	return rsp, nil
}

func (handler *CatalogueService_GRPCServerHandler) DeleteSock(ctx context.Context, req *CatalogueService_OTServerWrapperInterface_DeleteSock_Request) (*CatalogueService_OTServerWrapperInterface_DeleteSock_Response, error) {
	id, traceCtx := req.unmarshall()
	err := handler.Service.DeleteSock(ctx, id, traceCtx)
	if err != nil {
		return nil, err
	}

	rsp := &CatalogueService_OTServerWrapperInterface_DeleteSock_Response{}
	rsp.marshall()
	return rsp, nil
}

func (handler *CatalogueService_GRPCServerHandler) Get(ctx context.Context, req *CatalogueService_OTServerWrapperInterface_Get_Request) (*CatalogueService_OTServerWrapperInterface_Get_Response, error) {
	id, traceCtx := req.unmarshall()
	ret0, err := handler.Service.Get(ctx, id, traceCtx)
	if err != nil {
		return nil, err
	}

	rsp := &CatalogueService_OTServerWrapperInterface_Get_Response{}
	rsp.marshall(ret0)
	return rsp, nil
}

func (handler *CatalogueService_GRPCServerHandler) List(ctx context.Context, req *CatalogueService_OTServerWrapperInterface_List_Request) (*CatalogueService_OTServerWrapperInterface_List_Response, error) {
	tags, order, pageNum, pageSize, traceCtx := req.unmarshall()
	ret0, err := handler.Service.List(ctx, tags, order, pageNum, pageSize, traceCtx)
	if err != nil {
		return nil, err
	}

	rsp := &CatalogueService_OTServerWrapperInterface_List_Response{}
	rsp.marshall(ret0)
	return rsp, nil
}

func (handler *CatalogueService_GRPCServerHandler) Tags(ctx context.Context, req *CatalogueService_OTServerWrapperInterface_Tags_Request) (*CatalogueService_OTServerWrapperInterface_Tags_Response, error) {
	traceCtx := req.unmarshall()
	ret0, err := handler.Service.Tags(ctx, traceCtx)
	if err != nil {
		return nil, err
	}

	rsp := &CatalogueService_OTServerWrapperInterface_Tags_Response{}
	rsp.marshall(ret0)
	return rsp, nil
}

