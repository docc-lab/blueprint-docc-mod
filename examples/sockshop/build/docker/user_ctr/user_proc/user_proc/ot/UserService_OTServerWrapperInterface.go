// Blueprint: Auto-generated by XTrace Plugin
package ot

import (
	"context"
	"go.opentelemetry.io/otel/trace"
	"github.com/blueprint-uservices/blueprint/runtime/core/backend"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/user"
)

type UserService_OTServerWrapperInterface interface {
	Delete(ctx context.Context, entity string, id string, traceCtx string) (error)
	GetAddresses(ctx context.Context, id string, traceCtx string) ([]user.Address, error)
	GetCards(ctx context.Context, cardid string, traceCtx string) ([]user.Card, error)
	GetUsers(ctx context.Context, id string, traceCtx string) ([]user.User, error)
	Login(ctx context.Context, username string, password string, traceCtx string) (user.User, error)
	PostAddress(ctx context.Context, userid string, address user.Address, traceCtx string) (string, error)
	PostCard(ctx context.Context, userid string, card user.Card, traceCtx string) (string, error)
	PostUser(ctx context.Context, user user.User, traceCtx string) (string, error)
	Register(ctx context.Context, username string, password string, email string, first string, last string, traceCtx string) (string, error)
	
}

type UserService_OTServerWrapper struct {
	Service user.UserService
	CollClient backend.Tracer
}

func New_UserService_OTServerWrapper(ctx context.Context, service user.UserService, coll_client backend.Tracer) (*UserService_OTServerWrapper, error) {
	handler := &UserService_OTServerWrapper{}
	handler.Service = service
	handler.CollClient = coll_client
	return handler, nil
}


func (handler *UserService_OTServerWrapper) Delete(ctx context.Context, entity string, id string, traceCtx string) (err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("UserService")
	ctx, span := tr.Start(ctx, "UserServiceServer_Delete")
	defer span.End()
	err = handler.Service.Delete(ctx, entity, id)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *UserService_OTServerWrapper) GetAddresses(ctx context.Context, id string, traceCtx string) (ret0 []user.Address, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("UserService")
	ctx, span := tr.Start(ctx, "UserServiceServer_GetAddresses")
	defer span.End()
	ret0, err = handler.Service.GetAddresses(ctx, id)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *UserService_OTServerWrapper) GetCards(ctx context.Context, cardid string, traceCtx string) (ret0 []user.Card, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("UserService")
	ctx, span := tr.Start(ctx, "UserServiceServer_GetCards")
	defer span.End()
	ret0, err = handler.Service.GetCards(ctx, cardid)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *UserService_OTServerWrapper) GetUsers(ctx context.Context, id string, traceCtx string) (ret0 []user.User, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("UserService")
	ctx, span := tr.Start(ctx, "UserServiceServer_GetUsers")
	defer span.End()
	ret0, err = handler.Service.GetUsers(ctx, id)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *UserService_OTServerWrapper) Login(ctx context.Context, username string, password string, traceCtx string) (ret0 user.User, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("UserService")
	ctx, span := tr.Start(ctx, "UserServiceServer_Login")
	defer span.End()
	ret0, err = handler.Service.Login(ctx, username, password)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *UserService_OTServerWrapper) PostAddress(ctx context.Context, userid string, address user.Address, traceCtx string) (ret0 string, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("UserService")
	ctx, span := tr.Start(ctx, "UserServiceServer_PostAddress")
	defer span.End()
	ret0, err = handler.Service.PostAddress(ctx, userid, address)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *UserService_OTServerWrapper) PostCard(ctx context.Context, userid string, card user.Card, traceCtx string) (ret0 string, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("UserService")
	ctx, span := tr.Start(ctx, "UserServiceServer_PostCard")
	defer span.End()
	ret0, err = handler.Service.PostCard(ctx, userid, card)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *UserService_OTServerWrapper) PostUser(ctx context.Context, user user.User, traceCtx string) (ret0 string, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("UserService")
	ctx, span := tr.Start(ctx, "UserServiceServer_PostUser")
	defer span.End()
	ret0, err = handler.Service.PostUser(ctx, user)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *UserService_OTServerWrapper) Register(ctx context.Context, username string, password string, email string, first string, last string, traceCtx string) (ret0 string, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("UserService")
	ctx, span := tr.Start(ctx, "UserServiceServer_Register")
	defer span.End()
	ret0, err = handler.Service.Register(ctx, username, password, email, first, last)
	if err != nil {
		span.RecordError(err)
	}
	return
}

