// Blueprint: Auto-generated by GRPC Plugin
package grpc

import (
	"net"
	"google.golang.org/grpc"
	"blueprint/goproc/user_proc/ot"
	"context"
)

type UserService_GRPCServerHandler struct {
	UnimplementedUserService_OTServerWrapperInterfaceServer
	Service ot.UserService_OTServerWrapperInterface
	Address string
}

func New_UserService_GRPCServerHandler(ctx context.Context, service ot.UserService_OTServerWrapperInterface, serverAddress string) (*UserService_GRPCServerHandler, error) {
	handler := &UserService_GRPCServerHandler{}
	handler.Service = service
	handler.Address = serverAddress
	return handler, nil
}

// Blueprint: Run is called automatically in a separate goroutine by runtime/plugins/golang/di.go
func (handler *UserService_GRPCServerHandler) Run(ctx context.Context) error {
	lis, err := net.Listen("tcp", handler.Address)
	if err != nil {
		return err
	}

	s := grpc.NewServer()
	RegisterUserService_OTServerWrapperInterfaceServer(s, handler)

	go func() {
		select {
		case <-ctx.Done():
			s.GracefulStop()
		}
	}()

	return s.Serve(lis)
}


func (handler *UserService_GRPCServerHandler) Delete(ctx context.Context, req *UserService_OTServerWrapperInterface_Delete_Request) (*UserService_OTServerWrapperInterface_Delete_Response, error) {
	entity, id, traceCtx := req.unmarshall()
	err := handler.Service.Delete(ctx, entity, id, traceCtx)
	if err != nil {
		return nil, err
	}

	rsp := &UserService_OTServerWrapperInterface_Delete_Response{}
	rsp.marshall()
	return rsp, nil
}

func (handler *UserService_GRPCServerHandler) GetAddresses(ctx context.Context, req *UserService_OTServerWrapperInterface_GetAddresses_Request) (*UserService_OTServerWrapperInterface_GetAddresses_Response, error) {
	id, traceCtx := req.unmarshall()
	ret0, err := handler.Service.GetAddresses(ctx, id, traceCtx)
	if err != nil {
		return nil, err
	}

	rsp := &UserService_OTServerWrapperInterface_GetAddresses_Response{}
	rsp.marshall(ret0)
	return rsp, nil
}

func (handler *UserService_GRPCServerHandler) GetCards(ctx context.Context, req *UserService_OTServerWrapperInterface_GetCards_Request) (*UserService_OTServerWrapperInterface_GetCards_Response, error) {
	cardid, traceCtx := req.unmarshall()
	ret0, err := handler.Service.GetCards(ctx, cardid, traceCtx)
	if err != nil {
		return nil, err
	}

	rsp := &UserService_OTServerWrapperInterface_GetCards_Response{}
	rsp.marshall(ret0)
	return rsp, nil
}

func (handler *UserService_GRPCServerHandler) GetUsers(ctx context.Context, req *UserService_OTServerWrapperInterface_GetUsers_Request) (*UserService_OTServerWrapperInterface_GetUsers_Response, error) {
	id, traceCtx := req.unmarshall()
	ret0, err := handler.Service.GetUsers(ctx, id, traceCtx)
	if err != nil {
		return nil, err
	}

	rsp := &UserService_OTServerWrapperInterface_GetUsers_Response{}
	rsp.marshall(ret0)
	return rsp, nil
}

func (handler *UserService_GRPCServerHandler) Login(ctx context.Context, req *UserService_OTServerWrapperInterface_Login_Request) (*UserService_OTServerWrapperInterface_Login_Response, error) {
	username, password, traceCtx := req.unmarshall()
	ret0, err := handler.Service.Login(ctx, username, password, traceCtx)
	if err != nil {
		return nil, err
	}

	rsp := &UserService_OTServerWrapperInterface_Login_Response{}
	rsp.marshall(ret0)
	return rsp, nil
}

func (handler *UserService_GRPCServerHandler) PostAddress(ctx context.Context, req *UserService_OTServerWrapperInterface_PostAddress_Request) (*UserService_OTServerWrapperInterface_PostAddress_Response, error) {
	userid, address, traceCtx := req.unmarshall()
	ret0, err := handler.Service.PostAddress(ctx, userid, address, traceCtx)
	if err != nil {
		return nil, err
	}

	rsp := &UserService_OTServerWrapperInterface_PostAddress_Response{}
	rsp.marshall(ret0)
	return rsp, nil
}

func (handler *UserService_GRPCServerHandler) PostCard(ctx context.Context, req *UserService_OTServerWrapperInterface_PostCard_Request) (*UserService_OTServerWrapperInterface_PostCard_Response, error) {
	userid, card, traceCtx := req.unmarshall()
	ret0, err := handler.Service.PostCard(ctx, userid, card, traceCtx)
	if err != nil {
		return nil, err
	}

	rsp := &UserService_OTServerWrapperInterface_PostCard_Response{}
	rsp.marshall(ret0)
	return rsp, nil
}

func (handler *UserService_GRPCServerHandler) PostUser(ctx context.Context, req *UserService_OTServerWrapperInterface_PostUser_Request) (*UserService_OTServerWrapperInterface_PostUser_Response, error) {
	user, traceCtx := req.unmarshall()
	ret0, err := handler.Service.PostUser(ctx, user, traceCtx)
	if err != nil {
		return nil, err
	}

	rsp := &UserService_OTServerWrapperInterface_PostUser_Response{}
	rsp.marshall(ret0)
	return rsp, nil
}

func (handler *UserService_GRPCServerHandler) Register(ctx context.Context, req *UserService_OTServerWrapperInterface_Register_Request) (*UserService_OTServerWrapperInterface_Register_Response, error) {
	username, password, email, first, last, traceCtx := req.unmarshall()
	ret0, err := handler.Service.Register(ctx, username, password, email, first, last, traceCtx)
	if err != nil {
		return nil, err
	}

	rsp := &UserService_OTServerWrapperInterface_Register_Response{}
	rsp.marshall(ret0)
	return rsp, nil
}

