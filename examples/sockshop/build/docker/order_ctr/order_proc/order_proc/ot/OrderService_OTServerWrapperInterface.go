// Blueprint: Auto-generated by XTrace Plugin
package ot

import (
	"context"
	"go.opentelemetry.io/otel/trace"
	"github.com/blueprint-uservices/blueprint/runtime/core/backend"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/order"
)

type OrderService_OTServerWrapperInterface interface {
	GetOrder(ctx context.Context, orderID string, traceCtx string) (order.Order, error)
	GetOrders(ctx context.Context, customerID string, traceCtx string) ([]order.Order, error)
	NewOrder(ctx context.Context, customerID string, addressID string, cardID string, cartID string, traceCtx string) (order.Order, error)
	
}

type OrderService_OTServerWrapper struct {
	Service order.OrderService
	CollClient backend.Tracer
}

func New_OrderService_OTServerWrapper(ctx context.Context, service order.OrderService, coll_client backend.Tracer) (*OrderService_OTServerWrapper, error) {
	handler := &OrderService_OTServerWrapper{}
	handler.Service = service
	handler.CollClient = coll_client
	return handler, nil
}


func (handler *OrderService_OTServerWrapper) GetOrder(ctx context.Context, orderID string, traceCtx string) (ret0 order.Order, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("OrderService")
	ctx, span := tr.Start(ctx, "OrderServiceServer_GetOrder")
	defer span.End()
	ret0, err = handler.Service.GetOrder(ctx, orderID)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *OrderService_OTServerWrapper) GetOrders(ctx context.Context, customerID string, traceCtx string) (ret0 []order.Order, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("OrderService")
	ctx, span := tr.Start(ctx, "OrderServiceServer_GetOrders")
	defer span.End()
	ret0, err = handler.Service.GetOrders(ctx, customerID)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *OrderService_OTServerWrapper) NewOrder(ctx context.Context, customerID string, addressID string, cardID string, cartID string, traceCtx string) (ret0 order.Order, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("OrderService")
	ctx, span := tr.Start(ctx, "OrderServiceServer_NewOrder")
	defer span.End()
	ret0, err = handler.Service.NewOrder(ctx, customerID, addressID, cardID, cartID)
	if err != nil {
		span.RecordError(err)
	}
	return
}

