// Blueprint: Auto-generated by Retries Plugin
package retries

import (
	"context"
	"blueprint/goproc/order_proc/ot"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/cart"
)

type CartService_RetrierClient struct {
	Client ot.CartService_OTClientWrapperInterface
	MaxTries int
}

func New_CartService_RetrierClient (ctx context.Context, client ot.CartService_OTClientWrapperInterface) (*CartService_RetrierClient, error) {
	handler := &CartService_RetrierClient{}
	handler.Client = client
	handler.MaxTries = 3
	return handler, nil
}


func (client *CartService_RetrierClient) AddItem(ctx context.Context, customerID string, item cart.Item) (ret0 cart.Item, err error) {
	for i := 0; i < client.MaxTries; i++ {
		ret0, err = client.Client.AddItem(ctx, customerID, item)
		if err == nil {
			return
		}
	}
	return
}

func (client *CartService_RetrierClient) DeleteCart(ctx context.Context, customerID string) (err error) {
	for i := 0; i < client.MaxTries; i++ {
		err = client.Client.DeleteCart(ctx, customerID)
		if err == nil {
			return
		}
	}
	return
}

func (client *CartService_RetrierClient) GetCart(ctx context.Context, customerID string) (ret0 []cart.Item, err error) {
	for i := 0; i < client.MaxTries; i++ {
		ret0, err = client.Client.GetCart(ctx, customerID)
		if err == nil {
			return
		}
	}
	return
}

func (client *CartService_RetrierClient) GetItem(ctx context.Context, customerID string, itemID string) (ret0 cart.Item, err error) {
	for i := 0; i < client.MaxTries; i++ {
		ret0, err = client.Client.GetItem(ctx, customerID, itemID)
		if err == nil {
			return
		}
	}
	return
}

func (client *CartService_RetrierClient) MergeCarts(ctx context.Context, customerID string, sessionID string) (err error) {
	for i := 0; i < client.MaxTries; i++ {
		err = client.Client.MergeCarts(ctx, customerID, sessionID)
		if err == nil {
			return
		}
	}
	return
}

func (client *CartService_RetrierClient) RemoveItem(ctx context.Context, customerID string, itemID string) (err error) {
	for i := 0; i < client.MaxTries; i++ {
		err = client.Client.RemoveItem(ctx, customerID, itemID)
		if err == nil {
			return
		}
	}
	return
}

func (client *CartService_RetrierClient) UpdateItem(ctx context.Context, customerID string, item cart.Item) (err error) {
	for i := 0; i < client.MaxTries; i++ {
		err = client.Client.UpdateItem(ctx, customerID, item)
		if err == nil {
			return
		}
	}
	return
}

