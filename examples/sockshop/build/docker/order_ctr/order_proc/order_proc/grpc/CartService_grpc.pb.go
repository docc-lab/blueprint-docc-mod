// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: CartService.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CartService_OTServerWrapperInterface_AddItem_FullMethodName    = "/grpc.CartService_OTServerWrapperInterface/AddItem"
	CartService_OTServerWrapperInterface_DeleteCart_FullMethodName = "/grpc.CartService_OTServerWrapperInterface/DeleteCart"
	CartService_OTServerWrapperInterface_GetCart_FullMethodName    = "/grpc.CartService_OTServerWrapperInterface/GetCart"
	CartService_OTServerWrapperInterface_GetItem_FullMethodName    = "/grpc.CartService_OTServerWrapperInterface/GetItem"
	CartService_OTServerWrapperInterface_MergeCarts_FullMethodName = "/grpc.CartService_OTServerWrapperInterface/MergeCarts"
	CartService_OTServerWrapperInterface_RemoveItem_FullMethodName = "/grpc.CartService_OTServerWrapperInterface/RemoveItem"
	CartService_OTServerWrapperInterface_UpdateItem_FullMethodName = "/grpc.CartService_OTServerWrapperInterface/UpdateItem"
)

// CartService_OTServerWrapperInterfaceClient is the client API for CartService_OTServerWrapperInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CartService_OTServerWrapperInterfaceClient interface {
	AddItem(ctx context.Context, in *CartService_OTServerWrapperInterface_AddItem_Request, opts ...grpc.CallOption) (*CartService_OTServerWrapperInterface_AddItem_Response, error)
	DeleteCart(ctx context.Context, in *CartService_OTServerWrapperInterface_DeleteCart_Request, opts ...grpc.CallOption) (*CartService_OTServerWrapperInterface_DeleteCart_Response, error)
	GetCart(ctx context.Context, in *CartService_OTServerWrapperInterface_GetCart_Request, opts ...grpc.CallOption) (*CartService_OTServerWrapperInterface_GetCart_Response, error)
	GetItem(ctx context.Context, in *CartService_OTServerWrapperInterface_GetItem_Request, opts ...grpc.CallOption) (*CartService_OTServerWrapperInterface_GetItem_Response, error)
	MergeCarts(ctx context.Context, in *CartService_OTServerWrapperInterface_MergeCarts_Request, opts ...grpc.CallOption) (*CartService_OTServerWrapperInterface_MergeCarts_Response, error)
	RemoveItem(ctx context.Context, in *CartService_OTServerWrapperInterface_RemoveItem_Request, opts ...grpc.CallOption) (*CartService_OTServerWrapperInterface_RemoveItem_Response, error)
	UpdateItem(ctx context.Context, in *CartService_OTServerWrapperInterface_UpdateItem_Request, opts ...grpc.CallOption) (*CartService_OTServerWrapperInterface_UpdateItem_Response, error)
}

type cartService_OTServerWrapperInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewCartService_OTServerWrapperInterfaceClient(cc grpc.ClientConnInterface) CartService_OTServerWrapperInterfaceClient {
	return &cartService_OTServerWrapperInterfaceClient{cc}
}

func (c *cartService_OTServerWrapperInterfaceClient) AddItem(ctx context.Context, in *CartService_OTServerWrapperInterface_AddItem_Request, opts ...grpc.CallOption) (*CartService_OTServerWrapperInterface_AddItem_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartService_OTServerWrapperInterface_AddItem_Response)
	err := c.cc.Invoke(ctx, CartService_OTServerWrapperInterface_AddItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService_OTServerWrapperInterfaceClient) DeleteCart(ctx context.Context, in *CartService_OTServerWrapperInterface_DeleteCart_Request, opts ...grpc.CallOption) (*CartService_OTServerWrapperInterface_DeleteCart_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartService_OTServerWrapperInterface_DeleteCart_Response)
	err := c.cc.Invoke(ctx, CartService_OTServerWrapperInterface_DeleteCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService_OTServerWrapperInterfaceClient) GetCart(ctx context.Context, in *CartService_OTServerWrapperInterface_GetCart_Request, opts ...grpc.CallOption) (*CartService_OTServerWrapperInterface_GetCart_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartService_OTServerWrapperInterface_GetCart_Response)
	err := c.cc.Invoke(ctx, CartService_OTServerWrapperInterface_GetCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService_OTServerWrapperInterfaceClient) GetItem(ctx context.Context, in *CartService_OTServerWrapperInterface_GetItem_Request, opts ...grpc.CallOption) (*CartService_OTServerWrapperInterface_GetItem_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartService_OTServerWrapperInterface_GetItem_Response)
	err := c.cc.Invoke(ctx, CartService_OTServerWrapperInterface_GetItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService_OTServerWrapperInterfaceClient) MergeCarts(ctx context.Context, in *CartService_OTServerWrapperInterface_MergeCarts_Request, opts ...grpc.CallOption) (*CartService_OTServerWrapperInterface_MergeCarts_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartService_OTServerWrapperInterface_MergeCarts_Response)
	err := c.cc.Invoke(ctx, CartService_OTServerWrapperInterface_MergeCarts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService_OTServerWrapperInterfaceClient) RemoveItem(ctx context.Context, in *CartService_OTServerWrapperInterface_RemoveItem_Request, opts ...grpc.CallOption) (*CartService_OTServerWrapperInterface_RemoveItem_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartService_OTServerWrapperInterface_RemoveItem_Response)
	err := c.cc.Invoke(ctx, CartService_OTServerWrapperInterface_RemoveItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartService_OTServerWrapperInterfaceClient) UpdateItem(ctx context.Context, in *CartService_OTServerWrapperInterface_UpdateItem_Request, opts ...grpc.CallOption) (*CartService_OTServerWrapperInterface_UpdateItem_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartService_OTServerWrapperInterface_UpdateItem_Response)
	err := c.cc.Invoke(ctx, CartService_OTServerWrapperInterface_UpdateItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CartService_OTServerWrapperInterfaceServer is the server API for CartService_OTServerWrapperInterface service.
// All implementations must embed UnimplementedCartService_OTServerWrapperInterfaceServer
// for forward compatibility.
type CartService_OTServerWrapperInterfaceServer interface {
	AddItem(context.Context, *CartService_OTServerWrapperInterface_AddItem_Request) (*CartService_OTServerWrapperInterface_AddItem_Response, error)
	DeleteCart(context.Context, *CartService_OTServerWrapperInterface_DeleteCart_Request) (*CartService_OTServerWrapperInterface_DeleteCart_Response, error)
	GetCart(context.Context, *CartService_OTServerWrapperInterface_GetCart_Request) (*CartService_OTServerWrapperInterface_GetCart_Response, error)
	GetItem(context.Context, *CartService_OTServerWrapperInterface_GetItem_Request) (*CartService_OTServerWrapperInterface_GetItem_Response, error)
	MergeCarts(context.Context, *CartService_OTServerWrapperInterface_MergeCarts_Request) (*CartService_OTServerWrapperInterface_MergeCarts_Response, error)
	RemoveItem(context.Context, *CartService_OTServerWrapperInterface_RemoveItem_Request) (*CartService_OTServerWrapperInterface_RemoveItem_Response, error)
	UpdateItem(context.Context, *CartService_OTServerWrapperInterface_UpdateItem_Request) (*CartService_OTServerWrapperInterface_UpdateItem_Response, error)
	mustEmbedUnimplementedCartService_OTServerWrapperInterfaceServer()
}

// UnimplementedCartService_OTServerWrapperInterfaceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCartService_OTServerWrapperInterfaceServer struct{}

func (UnimplementedCartService_OTServerWrapperInterfaceServer) AddItem(context.Context, *CartService_OTServerWrapperInterface_AddItem_Request) (*CartService_OTServerWrapperInterface_AddItem_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItem not implemented")
}
func (UnimplementedCartService_OTServerWrapperInterfaceServer) DeleteCart(context.Context, *CartService_OTServerWrapperInterface_DeleteCart_Request) (*CartService_OTServerWrapperInterface_DeleteCart_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCart not implemented")
}
func (UnimplementedCartService_OTServerWrapperInterfaceServer) GetCart(context.Context, *CartService_OTServerWrapperInterface_GetCart_Request) (*CartService_OTServerWrapperInterface_GetCart_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCart not implemented")
}
func (UnimplementedCartService_OTServerWrapperInterfaceServer) GetItem(context.Context, *CartService_OTServerWrapperInterface_GetItem_Request) (*CartService_OTServerWrapperInterface_GetItem_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedCartService_OTServerWrapperInterfaceServer) MergeCarts(context.Context, *CartService_OTServerWrapperInterface_MergeCarts_Request) (*CartService_OTServerWrapperInterface_MergeCarts_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeCarts not implemented")
}
func (UnimplementedCartService_OTServerWrapperInterfaceServer) RemoveItem(context.Context, *CartService_OTServerWrapperInterface_RemoveItem_Request) (*CartService_OTServerWrapperInterface_RemoveItem_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveItem not implemented")
}
func (UnimplementedCartService_OTServerWrapperInterfaceServer) UpdateItem(context.Context, *CartService_OTServerWrapperInterface_UpdateItem_Request) (*CartService_OTServerWrapperInterface_UpdateItem_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItem not implemented")
}
func (UnimplementedCartService_OTServerWrapperInterfaceServer) mustEmbedUnimplementedCartService_OTServerWrapperInterfaceServer() {
}
func (UnimplementedCartService_OTServerWrapperInterfaceServer) testEmbeddedByValue() {}

// UnsafeCartService_OTServerWrapperInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CartService_OTServerWrapperInterfaceServer will
// result in compilation errors.
type UnsafeCartService_OTServerWrapperInterfaceServer interface {
	mustEmbedUnimplementedCartService_OTServerWrapperInterfaceServer()
}

func RegisterCartService_OTServerWrapperInterfaceServer(s grpc.ServiceRegistrar, srv CartService_OTServerWrapperInterfaceServer) {
	// If the following call pancis, it indicates UnimplementedCartService_OTServerWrapperInterfaceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CartService_OTServerWrapperInterface_ServiceDesc, srv)
}

func _CartService_OTServerWrapperInterface_AddItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartService_OTServerWrapperInterface_AddItem_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartService_OTServerWrapperInterfaceServer).AddItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_OTServerWrapperInterface_AddItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartService_OTServerWrapperInterfaceServer).AddItem(ctx, req.(*CartService_OTServerWrapperInterface_AddItem_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_OTServerWrapperInterface_DeleteCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartService_OTServerWrapperInterface_DeleteCart_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartService_OTServerWrapperInterfaceServer).DeleteCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_OTServerWrapperInterface_DeleteCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartService_OTServerWrapperInterfaceServer).DeleteCart(ctx, req.(*CartService_OTServerWrapperInterface_DeleteCart_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_OTServerWrapperInterface_GetCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartService_OTServerWrapperInterface_GetCart_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartService_OTServerWrapperInterfaceServer).GetCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_OTServerWrapperInterface_GetCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartService_OTServerWrapperInterfaceServer).GetCart(ctx, req.(*CartService_OTServerWrapperInterface_GetCart_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_OTServerWrapperInterface_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartService_OTServerWrapperInterface_GetItem_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartService_OTServerWrapperInterfaceServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_OTServerWrapperInterface_GetItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartService_OTServerWrapperInterfaceServer).GetItem(ctx, req.(*CartService_OTServerWrapperInterface_GetItem_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_OTServerWrapperInterface_MergeCarts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartService_OTServerWrapperInterface_MergeCarts_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartService_OTServerWrapperInterfaceServer).MergeCarts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_OTServerWrapperInterface_MergeCarts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartService_OTServerWrapperInterfaceServer).MergeCarts(ctx, req.(*CartService_OTServerWrapperInterface_MergeCarts_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_OTServerWrapperInterface_RemoveItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartService_OTServerWrapperInterface_RemoveItem_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartService_OTServerWrapperInterfaceServer).RemoveItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_OTServerWrapperInterface_RemoveItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartService_OTServerWrapperInterfaceServer).RemoveItem(ctx, req.(*CartService_OTServerWrapperInterface_RemoveItem_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_OTServerWrapperInterface_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartService_OTServerWrapperInterface_UpdateItem_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartService_OTServerWrapperInterfaceServer).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_OTServerWrapperInterface_UpdateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartService_OTServerWrapperInterfaceServer).UpdateItem(ctx, req.(*CartService_OTServerWrapperInterface_UpdateItem_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// CartService_OTServerWrapperInterface_ServiceDesc is the grpc.ServiceDesc for CartService_OTServerWrapperInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CartService_OTServerWrapperInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.CartService_OTServerWrapperInterface",
	HandlerType: (*CartService_OTServerWrapperInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddItem",
			Handler:    _CartService_OTServerWrapperInterface_AddItem_Handler,
		},
		{
			MethodName: "DeleteCart",
			Handler:    _CartService_OTServerWrapperInterface_DeleteCart_Handler,
		},
		{
			MethodName: "GetCart",
			Handler:    _CartService_OTServerWrapperInterface_GetCart_Handler,
		},
		{
			MethodName: "GetItem",
			Handler:    _CartService_OTServerWrapperInterface_GetItem_Handler,
		},
		{
			MethodName: "MergeCarts",
			Handler:    _CartService_OTServerWrapperInterface_MergeCarts_Handler,
		},
		{
			MethodName: "RemoveItem",
			Handler:    _CartService_OTServerWrapperInterface_RemoveItem_Handler,
		},
		{
			MethodName: "UpdateItem",
			Handler:    _CartService_OTServerWrapperInterface_UpdateItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "CartService.proto",
}
