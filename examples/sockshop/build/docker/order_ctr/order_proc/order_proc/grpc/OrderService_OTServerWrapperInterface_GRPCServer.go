// Blueprint: Auto-generated by GRPC Plugin
package grpc

import (
	"blueprint/goproc/order_proc/ot"
	"context"
	"net"
	"google.golang.org/grpc"
)

type OrderService_GRPCServerHandler struct {
	UnimplementedOrderService_OTServerWrapperInterfaceServer
	Service ot.OrderService_OTServerWrapperInterface
	Address string
}

func New_OrderService_GRPCServerHandler(ctx context.Context, service ot.OrderService_OTServerWrapperInterface, serverAddress string) (*OrderService_GRPCServerHandler, error) {
	handler := &OrderService_GRPCServerHandler{}
	handler.Service = service
	handler.Address = serverAddress
	return handler, nil
}

// Blueprint: Run is called automatically in a separate goroutine by runtime/plugins/golang/di.go
func (handler *OrderService_GRPCServerHandler) Run(ctx context.Context) error {
	lis, err := net.Listen("tcp", handler.Address)
	if err != nil {
		return err
	}

	s := grpc.NewServer()
	RegisterOrderService_OTServerWrapperInterfaceServer(s, handler)

	go func() {
		select {
		case <-ctx.Done():
			s.GracefulStop()
		}
	}()

	return s.Serve(lis)
}


func (handler *OrderService_GRPCServerHandler) GetOrder(ctx context.Context, req *OrderService_OTServerWrapperInterface_GetOrder_Request) (*OrderService_OTServerWrapperInterface_GetOrder_Response, error) {
	orderID, traceCtx := req.unmarshall()
	ret0, err := handler.Service.GetOrder(ctx, orderID, traceCtx)
	if err != nil {
		return nil, err
	}

	rsp := &OrderService_OTServerWrapperInterface_GetOrder_Response{}
	rsp.marshall(ret0)
	return rsp, nil
}

func (handler *OrderService_GRPCServerHandler) GetOrders(ctx context.Context, req *OrderService_OTServerWrapperInterface_GetOrders_Request) (*OrderService_OTServerWrapperInterface_GetOrders_Response, error) {
	customerID, traceCtx := req.unmarshall()
	ret0, err := handler.Service.GetOrders(ctx, customerID, traceCtx)
	if err != nil {
		return nil, err
	}

	rsp := &OrderService_OTServerWrapperInterface_GetOrders_Response{}
	rsp.marshall(ret0)
	return rsp, nil
}

func (handler *OrderService_GRPCServerHandler) NewOrder(ctx context.Context, req *OrderService_OTServerWrapperInterface_NewOrder_Request) (*OrderService_OTServerWrapperInterface_NewOrder_Response, error) {
	customerID, addressID, cardID, cartID, traceCtx := req.unmarshall()
	ret0, err := handler.Service.NewOrder(ctx, customerID, addressID, cardID, cartID, traceCtx)
	if err != nil {
		return nil, err
	}

	rsp := &OrderService_OTServerWrapperInterface_NewOrder_Response{}
	rsp.marshall(ret0)
	return rsp, nil
}

