// Package main is auto-generated by gogen/namespacebuilder.go
//
// It provides funcs for instantiating the wlgen_proc namespace.
//
// To instantiate the wlgen_proc namespace, first call [New_wlgen_proc] and then either call 
// [Build] or [BuildWithParent].
// 
// See [golang.NamespaceBuilder] docs for more information about the behavior of [Build]
package main

import (
	"github.com/blueprint-uservices/blueprint/runtime/plugins/slogger"
	"blueprint/goproc/wlgen_proc/pool"
	"blueprint/goproc/wlgen_proc/ot"
	"blueprint/goproc/wlgen_proc/retries"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workflow/frontend"
	"github.com/blueprint-uservices/blueprint/examples/sockshop/workload/workloadgen"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/golang"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/opentelemetry"
)

// Initializes the wlgen_proc namespace by defining all of the nodes that run
// within the namespace.
//
// [Build] or [BuildWithParent] must be called on the return value of this func
// to actually build and run the nodes in the namespace.
func New_wlgen_proc(name string) *golang.NamespaceBuilder {
	b := golang.NewNamespaceBuilder(name)
	set_wlgen_proc_Args(b)
	set_wlgen_proc_Instances(b)
	set_wlgen_proc_Definitions(b)
	return b
}

// wlgen_proc requires that its arguments are either:
//  - explicitly set with [golang.NamespaceBuilder.Set]
//  - passed on the command line (if built using [golang.NamespaceBuilder.Build])
//  - are defined in parent (if built using [golang.NamespaceBuilder.BuildWithParent])
//
// The following arguments will be eagerly checked and building the namespace
// will fail if they haven't been provided:
//   frontend.http.dial_addr
//
// The following arguments are optional and a failure will only occur if the client
// tries to build a node that needs the argument to be set
func set_wlgen_proc_Args(b *golang.NamespaceBuilder) {
	b.Required("frontend.http.dial_addr", "Argument generated by Blueprint IR: frontend.http.dial_addr = AddressConfig()")
}

// When the wlgen_proc namespace is built it will automatically instantiate
// the following nodes:
//   wlgen.proc.stdoutmetriccollector
//   wlgen.proc.logger
//   frontend.clientpool
//   frontend.client.retrier
//   frontend.client
//   wlgen.service
func set_wlgen_proc_Instances(b *golang.NamespaceBuilder) {
	b.Instantiate("wlgen.proc.stdoutmetriccollector")
	b.Instantiate("wlgen.proc.logger")
	b.Instantiate("frontend.clientpool")
	b.Instantiate("frontend.client.retrier")
	b.Instantiate("frontend.client")
	b.Instantiate("wlgen.service")
}

// The wlgen_proc namespace contains definitions for instantiating
// the following nodes:
//   frontend.client
//   frontend.client.retrier
//   frontend.clientpool
//   wlgen.proc.logger
//   wlgen.proc.stdoutmetriccollector
//   wlgen.service
func set_wlgen_proc_Definitions(b *golang.NamespaceBuilder) {
	b.Define("frontend.client", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin workflow/ir_workflowservice.go
		var client frontend.Frontend
		err := n.Get("frontend.client.retrier", &client)
		return client, err
	})
	
	b.Define("frontend.client.retrier", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var client ot.Frontend_OTClientWrapperInterface
		if err := n.Get("frontend.clientpool", &client); err != nil {
			return nil, err
		}
		
		return retries.New_Frontend_RetrierClient(n.Context(), client)
	})
	
	b.Define("frontend.clientpool", func(n *golang.Namespace) (any, error) {
		return pool.New_Frontend_Pool(n), nil
	})
	
	b.Define("wlgen.proc.logger", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		return slogger.NewSLogger(n.Context())
	})
	
	b.Define("wlgen.proc.stdoutmetriccollector", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		return opentelemetry.NewStdoutMetricCollector(n.Context())
	})
	
	b.Define("wlgen.service", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var frontend frontend.Frontend
		if err := n.Get("frontend.client", &frontend); err != nil {
			return nil, err
		}
		
		return workloadgen.NewSimpleWorkload(n.Context(), frontend)
	})
	
}
