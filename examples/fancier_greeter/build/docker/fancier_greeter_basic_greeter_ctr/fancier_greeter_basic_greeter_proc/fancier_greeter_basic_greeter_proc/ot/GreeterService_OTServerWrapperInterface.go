// Blueprint: Auto-generated by XTrace Plugin
package ot

import (
	"github.com/blueprint-uservices/blueprint/runtime/core/backend"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/greeter"
	"context"
	"go.opentelemetry.io/otel/trace"
)

type GreeterService_OTServerWrapperInterface interface {
	SayGoodbye(ctx context.Context, name string, traceCtx string) (string, error)
	SayHello(ctx context.Context, name string, traceCtx string) (string, error)
	
}

type GreeterService_OTServerWrapper struct {
	Service greeter.GreeterService
	CollClient backend.Tracer
}

func New_GreeterService_OTServerWrapper(ctx context.Context, service greeter.GreeterService, coll_client backend.Tracer) (*GreeterService_OTServerWrapper, error) {
	handler := &GreeterService_OTServerWrapper{}
	handler.Service = service
	handler.CollClient = coll_client
	return handler, nil
}


func (handler *GreeterService_OTServerWrapper) SayGoodbye(ctx context.Context, name string, traceCtx string) (ret0 string, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("GreeterService")
	ctx, span := tr.Start(ctx, "GreeterServiceServer_SayGoodbye")
	defer span.End()
	ret0, err = handler.Service.SayGoodbye(ctx, name)
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *GreeterService_OTServerWrapper) SayHello(ctx context.Context, name string, traceCtx string) (ret0 string, err error) {
	if traceCtx != "" {
		span_ctx_config, _ := backend.GetSpanContext(traceCtx)
		span_ctx := trace.NewSpanContext(span_ctx_config)
		ctx = trace.ContextWithRemoteSpanContext(ctx, span_ctx)
	}

	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("GreeterService")
	ctx, span := tr.Start(ctx, "GreeterServiceServer_SayHello")
	defer span.End()
	ret0, err = handler.Service.SayHello(ctx, name)
	if err != nil {
		span.RecordError(err)
	}
	return
}

