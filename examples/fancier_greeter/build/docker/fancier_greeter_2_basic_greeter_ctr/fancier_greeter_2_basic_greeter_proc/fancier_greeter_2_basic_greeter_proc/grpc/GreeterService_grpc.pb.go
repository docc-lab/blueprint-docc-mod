// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: GreeterService.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GreeterService_OTServerWrapperInterface_SayGoodbye_FullMethodName = "/grpc.GreeterService_OTServerWrapperInterface/SayGoodbye"
	GreeterService_OTServerWrapperInterface_SayHello_FullMethodName   = "/grpc.GreeterService_OTServerWrapperInterface/SayHello"
)

// GreeterService_OTServerWrapperInterfaceClient is the client API for GreeterService_OTServerWrapperInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterService_OTServerWrapperInterfaceClient interface {
	SayGoodbye(ctx context.Context, in *GreeterService_OTServerWrapperInterface_SayGoodbye_Request, opts ...grpc.CallOption) (*GreeterService_OTServerWrapperInterface_SayGoodbye_Response, error)
	SayHello(ctx context.Context, in *GreeterService_OTServerWrapperInterface_SayHello_Request, opts ...grpc.CallOption) (*GreeterService_OTServerWrapperInterface_SayHello_Response, error)
}

type greeterService_OTServerWrapperInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterService_OTServerWrapperInterfaceClient(cc grpc.ClientConnInterface) GreeterService_OTServerWrapperInterfaceClient {
	return &greeterService_OTServerWrapperInterfaceClient{cc}
}

func (c *greeterService_OTServerWrapperInterfaceClient) SayGoodbye(ctx context.Context, in *GreeterService_OTServerWrapperInterface_SayGoodbye_Request, opts ...grpc.CallOption) (*GreeterService_OTServerWrapperInterface_SayGoodbye_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GreeterService_OTServerWrapperInterface_SayGoodbye_Response)
	err := c.cc.Invoke(ctx, GreeterService_OTServerWrapperInterface_SayGoodbye_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterService_OTServerWrapperInterfaceClient) SayHello(ctx context.Context, in *GreeterService_OTServerWrapperInterface_SayHello_Request, opts ...grpc.CallOption) (*GreeterService_OTServerWrapperInterface_SayHello_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GreeterService_OTServerWrapperInterface_SayHello_Response)
	err := c.cc.Invoke(ctx, GreeterService_OTServerWrapperInterface_SayHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterService_OTServerWrapperInterfaceServer is the server API for GreeterService_OTServerWrapperInterface service.
// All implementations must embed UnimplementedGreeterService_OTServerWrapperInterfaceServer
// for forward compatibility.
type GreeterService_OTServerWrapperInterfaceServer interface {
	SayGoodbye(context.Context, *GreeterService_OTServerWrapperInterface_SayGoodbye_Request) (*GreeterService_OTServerWrapperInterface_SayGoodbye_Response, error)
	SayHello(context.Context, *GreeterService_OTServerWrapperInterface_SayHello_Request) (*GreeterService_OTServerWrapperInterface_SayHello_Response, error)
	mustEmbedUnimplementedGreeterService_OTServerWrapperInterfaceServer()
}

// UnimplementedGreeterService_OTServerWrapperInterfaceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGreeterService_OTServerWrapperInterfaceServer struct{}

func (UnimplementedGreeterService_OTServerWrapperInterfaceServer) SayGoodbye(context.Context, *GreeterService_OTServerWrapperInterface_SayGoodbye_Request) (*GreeterService_OTServerWrapperInterface_SayGoodbye_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayGoodbye not implemented")
}
func (UnimplementedGreeterService_OTServerWrapperInterfaceServer) SayHello(context.Context, *GreeterService_OTServerWrapperInterface_SayHello_Request) (*GreeterService_OTServerWrapperInterface_SayHello_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedGreeterService_OTServerWrapperInterfaceServer) mustEmbedUnimplementedGreeterService_OTServerWrapperInterfaceServer() {
}
func (UnimplementedGreeterService_OTServerWrapperInterfaceServer) testEmbeddedByValue() {}

// UnsafeGreeterService_OTServerWrapperInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterService_OTServerWrapperInterfaceServer will
// result in compilation errors.
type UnsafeGreeterService_OTServerWrapperInterfaceServer interface {
	mustEmbedUnimplementedGreeterService_OTServerWrapperInterfaceServer()
}

func RegisterGreeterService_OTServerWrapperInterfaceServer(s grpc.ServiceRegistrar, srv GreeterService_OTServerWrapperInterfaceServer) {
	// If the following call pancis, it indicates UnimplementedGreeterService_OTServerWrapperInterfaceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GreeterService_OTServerWrapperInterface_ServiceDesc, srv)
}

func _GreeterService_OTServerWrapperInterface_SayGoodbye_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreeterService_OTServerWrapperInterface_SayGoodbye_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterService_OTServerWrapperInterfaceServer).SayGoodbye(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GreeterService_OTServerWrapperInterface_SayGoodbye_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterService_OTServerWrapperInterfaceServer).SayGoodbye(ctx, req.(*GreeterService_OTServerWrapperInterface_SayGoodbye_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreeterService_OTServerWrapperInterface_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreeterService_OTServerWrapperInterface_SayHello_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterService_OTServerWrapperInterfaceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GreeterService_OTServerWrapperInterface_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterService_OTServerWrapperInterfaceServer).SayHello(ctx, req.(*GreeterService_OTServerWrapperInterface_SayHello_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// GreeterService_OTServerWrapperInterface_ServiceDesc is the grpc.ServiceDesc for GreeterService_OTServerWrapperInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreeterService_OTServerWrapperInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.GreeterService_OTServerWrapperInterface",
	HandlerType: (*GreeterService_OTServerWrapperInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayGoodbye",
			Handler:    _GreeterService_OTServerWrapperInterface_SayGoodbye_Handler,
		},
		{
			MethodName: "SayHello",
			Handler:    _GreeterService_OTServerWrapperInterface_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "GreeterService.proto",
}
