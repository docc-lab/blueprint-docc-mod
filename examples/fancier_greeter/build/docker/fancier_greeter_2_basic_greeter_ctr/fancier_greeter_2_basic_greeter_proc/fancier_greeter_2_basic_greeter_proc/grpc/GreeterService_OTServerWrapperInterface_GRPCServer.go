// Blueprint: Auto-generated by GRPC Plugin
package grpc

import (
	"context"
	"net"
	"google.golang.org/grpc"
	"blueprint/goproc/fancier_greeter_2_basic_greeter_proc/ot"
)

type GreeterService_GRPCServerHandler struct {
	UnimplementedGreeterService_OTServerWrapperInterfaceServer
	Service ot.GreeterService_OTServerWrapperInterface
	Address string
}

func New_GreeterService_GRPCServerHandler(ctx context.Context, service ot.GreeterService_OTServerWrapperInterface, serverAddress string) (*GreeterService_GRPCServerHandler, error) {
	handler := &GreeterService_GRPCServerHandler{}
	handler.Service = service
	handler.Address = serverAddress
	return handler, nil
}

// Blueprint: Run is called automatically in a separate goroutine by runtime/plugins/golang/di.go
func (handler *GreeterService_GRPCServerHandler) Run(ctx context.Context) error {
	lis, err := net.Listen("tcp", handler.Address)
	if err != nil {
		return err
	}

	s := grpc.NewServer()
	RegisterGreeterService_OTServerWrapperInterfaceServer(s, handler)

	go func() {
		select {
		case <-ctx.Done():
			s.GracefulStop()
		}
	}()

	return s.Serve(lis)
}


func (handler *GreeterService_GRPCServerHandler) SayGoodbye(ctx context.Context, req *GreeterService_OTServerWrapperInterface_SayGoodbye_Request) (*GreeterService_OTServerWrapperInterface_SayGoodbye_Response, error) {
	name, traceCtx := req.unmarshall()
	ret0, err := handler.Service.SayGoodbye(ctx, name, traceCtx)
	if err != nil {
		return nil, err
	}

	rsp := &GreeterService_OTServerWrapperInterface_SayGoodbye_Response{}
	rsp.marshall(ret0)
	return rsp, nil
}

func (handler *GreeterService_GRPCServerHandler) SayHello(ctx context.Context, req *GreeterService_OTServerWrapperInterface_SayHello_Request) (*GreeterService_OTServerWrapperInterface_SayHello_Response, error) {
	name, traceCtx := req.unmarshall()
	ret0, err := handler.Service.SayHello(ctx, name, traceCtx)
	if err != nil {
		return nil, err
	}

	rsp := &GreeterService_OTServerWrapperInterface_SayHello_Response{}
	rsp.marshall(ret0)
	return rsp, nil
}

