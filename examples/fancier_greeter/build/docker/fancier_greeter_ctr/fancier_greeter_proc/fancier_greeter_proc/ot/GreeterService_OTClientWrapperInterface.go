// Blueprint: Auto-generated by OT Plugin
package ot

import (
	"context"
	"fmt"

	"github.com/blueprint-uservices/blueprint/runtime/core/backend"
	"go.opentelemetry.io/otel/trace"
	"golang.org/x/exp/slog"
)

type GreeterService_OTClientWrapperInterface interface {
	SayGoodbye(ctx context.Context, name string) (string, error)
	SayHello(ctx context.Context, name string) (string, error)
}

type GreeterService_OTClientWrapper struct {
	Client     GreeterService_OTServerWrapperInterface
	CollClient backend.Tracer
}

func New_GreeterService_OTClientWrapper(ctx context.Context, client GreeterService_OTServerWrapperInterface, coll_client backend.Tracer) (*GreeterService_OTClientWrapper, error) {
	handler := &GreeterService_OTClientWrapper{}
	handler.Client = client
	handler.CollClient = coll_client
	return handler, nil
}

func (handler *GreeterService_OTClientWrapper) SayGoodbye(ctx context.Context, name string) (ret0 string, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("GreeterService_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "GreeterServiceClient_SayGoodbye")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.SayGoodbye(ctx, name, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *GreeterService_OTClientWrapper) SayHello(ctx context.Context, name string) (ret0 string, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("GreeterService_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "GreeterServiceClient_SayHello")
	slog.Info("\n\n\n")
	slog.Info("SPAN BEFORE CALL:\n")
	slog.Info(fmt.Sprintf("%+v", span))
	slog.Info("\n\n\n")
	// defer span.End()
	defer func(s trace.Span) {
		span.End()
		slog.Info("\n\n\n")
		slog.Info("SPAN AFTER CALL:\n")
		slog.Info(fmt.Sprintf("%+v", s))
		slog.Info("\n\n\n")
	}(span)
	trace_ctx, _ := span.SpanContext().MarshalJSON()

	slog.Info("\n\n\n")
	slog.Info("SPAN CONTEXT BEFORE CALL:\n")
	span_ctx_config, _ := backend.GetSpanContext(string(trace_ctx))
	slog.Info(fmt.Sprintf("%+v", span_ctx_config))
	slog.Info("\n\n\n")

	slog.Info("\n\n\n")
	slog.Info("SPAN CONTEXT BEFORE CALL 2:\n")
	slog.Info(fmt.Sprintf("%+v", trace.SpanFromContext(ctx)))
	slog.Info("\n\n\n")

	ret0, err = handler.Client.SayHello(ctx, name, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}
