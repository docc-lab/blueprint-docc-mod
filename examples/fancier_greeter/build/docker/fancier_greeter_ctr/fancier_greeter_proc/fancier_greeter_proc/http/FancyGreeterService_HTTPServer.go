// Blueprint: Auto-generated by HTTP Plugin
package http

import (
	"github.com/gorilla/mux"
	"blueprint/goproc/fancier_greeter_proc/ot"
	"context"
	"encoding/json"
	"net/http"
)

type FancyGreeterService_HTTPServerHandler struct {
	Service ot.FancyGreeterService_OTServerWrapperInterface
	Address string
}

func New_FancyGreeterService_HTTPServerHandler(ctx context.Context, service ot.FancyGreeterService_OTServerWrapperInterface, serverAddress string) (*FancyGreeterService_HTTPServerHandler, error) {
	handler := &FancyGreeterService_HTTPServerHandler{}
	handler.Service = service
	handler.Address = serverAddress
	return handler, nil
}

// Blueprint: Run is called automatically in a separate goroutine by runtime/plugins/golang/di.go
func (handler *FancyGreeterService_HTTPServerHandler) Run(ctx context.Context) error {
	router := mux.NewRouter()
	// Add paths for the mux router
	
	router.Path("/FarewellWithEmotion").HandlerFunc(handler.FarewellWithEmotion)
	
	router.Path("/GreetWithTitle").HandlerFunc(handler.GreetWithTitle)
	
	srv := &http.Server {
		Addr: handler.Address,
		Handler: router,
	}

	go func() {
		select {
		case <-ctx.Done():
			srv.Shutdown(ctx)
		}
	}()

	return srv.ListenAndServe()
}


func (handler *FancyGreeterService_HTTPServerHandler) FarewellWithEmotion(w http.ResponseWriter, r *http.Request) {
	var err error
	defer r.Body.Close()
	
	name := r.URL.Query().Get("name")
	
	emotion := r.URL.Query().Get("emotion")
	
	traceCtx := r.URL.Query().Get("traceCtx")
	
	ctx := context.Background()
	ret0, err := handler.Service.FarewellWithEmotion(ctx, name, emotion, traceCtx)
	if err != nil {
		http.Error(w, err.Error(), 500)
		return
	}
	response := struct {
		
		Ret0 string
		
	}{}
	
	response.Ret0 = ret0
	
	json.NewEncoder(w).Encode(response)
}

func (handler *FancyGreeterService_HTTPServerHandler) GreetWithTitle(w http.ResponseWriter, r *http.Request) {
	var err error
	defer r.Body.Close()
	
	name := r.URL.Query().Get("name")
	
	title := r.URL.Query().Get("title")
	
	traceCtx := r.URL.Query().Get("traceCtx")
	
	ctx := context.Background()
	ret0, err := handler.Service.GreetWithTitle(ctx, name, title, traceCtx)
	if err != nil {
		http.Error(w, err.Error(), 500)
		return
	}
	response := struct {
		
		Ret0 string
		
	}{}
	
	response.Ret0 = ret0
	
	json.NewEncoder(w).Encode(response)
}

