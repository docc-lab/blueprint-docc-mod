// Package main is auto-generated by gogen/namespacebuilder.go
//
// It provides funcs for instantiating the fancy_greeter_0_proc namespace.
//
// To instantiate the fancy_greeter_0_proc namespace, first call [New_fancy_greeter_0_proc] and then either call 
// [Build] or [BuildWithParent].
// 
// See [golang.NamespaceBuilder] docs for more information about the behavior of [Build]
package main

import (
	"github.com/blueprint-uservices/blueprint/runtime/plugins/zipkin"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/opentelemetry"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/slogger"
	"blueprint/goproc/fancy_greeter_0_proc/retries"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/fancygreeter"
	"github.com/blueprint-uservices/blueprint/runtime/core/backend"
	"blueprint/goproc/fancy_greeter_0_proc/http"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/golang"
	"blueprint/goproc/fancy_greeter_0_proc/pool"
	"blueprint/goproc/fancy_greeter_0_proc/ot"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/fanciergreeter"
)

// Initializes the fancy_greeter_0_proc namespace by defining all of the nodes that run
// within the namespace.
//
// [Build] or [BuildWithParent] must be called on the return value of this func
// to actually build and run the nodes in the namespace.
func New_fancy_greeter_0_proc(name string) *golang.NamespaceBuilder {
	b := golang.NewNamespaceBuilder(name)
	set_fancy_greeter_0_proc_Args(b)
	set_fancy_greeter_0_proc_Instances(b)
	set_fancy_greeter_0_proc_Definitions(b)
	return b
}

// fancy_greeter_0_proc requires that its arguments are either:
//  - explicitly set with [golang.NamespaceBuilder.Set]
//  - passed on the command line (if built using [golang.NamespaceBuilder.Build])
//  - are defined in parent (if built using [golang.NamespaceBuilder.BuildWithParent])
//
// The following arguments will be eagerly checked and building the namespace
// will fail if they haven't been provided:
//   basic_greeter.grpc.dial_addr
//   fancy_greeter_0.http.bind_addr
//   zipkin.dial_addr
//
// The following arguments are optional and a failure will only occur if the client
// tries to build a node that needs the argument to be set
func set_fancy_greeter_0_proc_Args(b *golang.NamespaceBuilder) {
	b.Required("basic_greeter.grpc.dial_addr", "Argument generated by Blueprint IR: basic_greeter.grpc.dial_addr = AddressConfig()")
	b.Required("fancy_greeter_0.http.bind_addr", "Argument generated by Blueprint IR: fancy_greeter_0.http.bind_addr = AddressConfig()")
	b.Required("zipkin.dial_addr", "Argument generated by Blueprint IR: zipkin.dial_addr = AddressConfig()")
}

// When the fancy_greeter_0_proc namespace is built it will automatically instantiate
// the following nodes:
//   fancy_greeter_0_proc.stdoutmetriccollector
//   fancy_greeter_0_proc.logger
//   basic_greeter.clientpool
//   basic_greeter.client.retrier
//   fancy_greeter_0
//   zipkin.client
//   fancy_greeter_0.server.ot
//   fancy_greeter_0.http_server
func set_fancy_greeter_0_proc_Instances(b *golang.NamespaceBuilder) {
	b.Instantiate("fancy_greeter_0_proc.stdoutmetriccollector")
	b.Instantiate("fancy_greeter_0_proc.logger")
	b.Instantiate("basic_greeter.clientpool")
	b.Instantiate("basic_greeter.client.retrier")
	b.Instantiate("fancy_greeter_0")
	b.Instantiate("zipkin.client")
	b.Instantiate("fancy_greeter_0.server.ot")
	b.Instantiate("fancy_greeter_0.http_server")
}

// The fancy_greeter_0_proc namespace contains definitions for instantiating
// the following nodes:
//   basic_greeter.client.retrier
//   basic_greeter.clientpool
//   fancy_greeter_0
//   fancy_greeter_0.http_server
//   fancy_greeter_0.server.ot
//   fancy_greeter_0_proc.logger
//   fancy_greeter_0_proc.stdoutmetriccollector
//   zipkin.client
func set_fancy_greeter_0_proc_Definitions(b *golang.NamespaceBuilder) {
	b.Define("basic_greeter.client.retrier", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var client ot.GreeterService_OTClientWrapperInterface
		if err := n.Get("basic_greeter.clientpool", &client); err != nil {
			return nil, err
		}
		
		return retries.New_GreeterService_RetrierClient(n.Context(), client)
	})
	
	b.Define("basic_greeter.clientpool", func(n *golang.Namespace) (any, error) {
		return pool.New_GreeterService_Pool(n), nil
	})
	
	b.Define("fancy_greeter_0", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var basicGreeter ot.GreeterService_OTClientWrapperInterface
		if err := n.Get("basic_greeter.client.retrier", &basicGreeter); err != nil {
			return nil, err
		}
		
		return fancygreeter.NewSimpleFancyGreeter(n.Context(), basicGreeter)
	})
	
	b.Define("fancy_greeter_0.http_server", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var service ot.FancierGreeterService_OTServerWrapperInterface
		if err := n.Get("fancy_greeter_0.server.ot", &service); err != nil {
			return nil, err
		}
		
		var serverAddr string
		if err := n.Get("fancy_greeter_0.http.bind_addr", &serverAddr); err != nil {
			return nil, err
		}
		
		return http.New_FancierGreeterService_HTTPServerHandler(n.Context(), service, serverAddr)
	})
	
	b.Define("fancy_greeter_0.server.ot", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var service fanciergreeter.FancierGreeterService
		if err := n.Get("fancy_greeter_0", &service); err != nil {
			return nil, err
		}
		
		var otCollectorClient backend.Tracer
		if err := n.Get("zipkin.client", &otCollectorClient); err != nil {
			return nil, err
		}
		
		return ot.New_FancierGreeterService_OTServerWrapper(n.Context(), service, otCollectorClient)
	})
	
	b.Define("fancy_greeter_0_proc.logger", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		return slogger.NewSLogger(n.Context())
	})
	
	b.Define("fancy_greeter_0_proc.stdoutmetriccollector", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		return opentelemetry.NewStdoutMetricCollector(n.Context())
	})
	
	b.Define("zipkin.client", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var addr string
		if err := n.Get("zipkin.dial_addr", &addr); err != nil {
			return nil, err
		}
		
		return zipkin.NewZipkinTracer(n.Context(), addr)
	})
	
}
