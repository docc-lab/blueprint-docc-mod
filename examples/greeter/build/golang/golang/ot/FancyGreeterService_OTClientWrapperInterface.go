// Blueprint: Auto-generated by OT Plugin
package ot

import (
	"context"
	"github.com/blueprint-uservices/blueprint/runtime/core/backend"
)

type FancyGreeterService_OTClientWrapperInterface interface {
	FarewellWithEmotion(ctx context.Context, name string, emotion string) (string, error)
	GreetWithTitle(ctx context.Context, name string, title string) (string, error)
	
}

type FancyGreeterService_OTClientWrapper struct {
	Client FancyGreeterService_OTServerWrapperInterface
	CollClient backend.Tracer
}

func New_FancyGreeterService_OTClientWrapper(ctx context.Context, client FancyGreeterService_OTServerWrapperInterface, coll_client backend.Tracer) (*FancyGreeterService_OTClientWrapper, error) {
	handler := &FancyGreeterService_OTClientWrapper{}
	handler.Client = client
	handler.CollClient = coll_client
	return handler, nil
}


func (handler *FancyGreeterService_OTClientWrapper) FarewellWithEmotion(ctx context.Context, name string, emotion string) (ret0 string, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("FancyGreeterService_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "FancyGreeterServiceClient_FarewellWithEmotion")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.FarewellWithEmotion(ctx, name, emotion, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

func (handler *FancyGreeterService_OTClientWrapper) GreetWithTitle(ctx context.Context, name string, title string) (ret0 string, err error) {
	tp, _ := handler.CollClient.GetTracerProvider(ctx)
	tr := tp.Tracer("FancyGreeterService_OTServerWrapperInterface")
	ctx, span := tr.Start(ctx, "FancyGreeterServiceClient_GreetWithTitle")
	defer span.End()
	trace_ctx, _ := span.SpanContext().MarshalJSON()
	ret0, err = handler.Client.GreetWithTitle(ctx, name, title, string(trace_ctx))
	if err != nil {
		span.RecordError(err)
	}
	return
}

