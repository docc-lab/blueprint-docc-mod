// Package main is auto-generated by gogen/namespacebuilder.go
//
// It provides funcs for instantiating the golang namespace.
//
// To instantiate the golang namespace, first call [New_golang] and then either call 
// [Build] or [BuildWithParent].
// 
// See [golang.NamespaceBuilder] docs for more information about the behavior of [Build]
package main

import (
	"blueprint/goproc/golang/pool"
	"blueprint/goproc/golang/ot"
	"blueprint/goproc/golang/retries"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/golang"
)

// Initializes the golang namespace by defining all of the nodes that run
// within the namespace.
//
// [Build] or [BuildWithParent] must be called on the return value of this func
// to actually build and run the nodes in the namespace.
func New_golang(name string) *golang.NamespaceBuilder {
	b := golang.NewNamespaceBuilder(name)
	set_golang_Args(b)
	set_golang_Instances(b)
	set_golang_Definitions(b)
	return b
}

// golang requires that its arguments are either:
//  - explicitly set with [golang.NamespaceBuilder.Set]
//  - passed on the command line (if built using [golang.NamespaceBuilder.Build])
//  - are defined in parent (if built using [golang.NamespaceBuilder.BuildWithParent])
//
// The following arguments will be eagerly checked and building the namespace
// will fail if they haven't been provided:
//
// The following arguments are optional and a failure will only occur if the client
// tries to build a node that needs the argument to be set
func set_golang_Args(b *golang.NamespaceBuilder) {
}

// When the golang namespace is built it will automatically instantiate
// the following nodes:
//   fancy_greeter.clientpool
//   fancy_greeter.client.retrier
//   basic_greeter.clientpool
//   basic_greeter.client.retrier
func set_golang_Instances(b *golang.NamespaceBuilder) {
	b.Instantiate("fancy_greeter.clientpool")
	b.Instantiate("fancy_greeter.client.retrier")
	b.Instantiate("basic_greeter.clientpool")
	b.Instantiate("basic_greeter.client.retrier")
}

// The golang namespace contains definitions for instantiating
// the following nodes:
//   basic_greeter.client.retrier
//   basic_greeter.clientpool
//   fancy_greeter.client.retrier
//   fancy_greeter.clientpool
func set_golang_Definitions(b *golang.NamespaceBuilder) {
	b.Define("basic_greeter.client.retrier", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var client ot.GreeterService_OTClientWrapperInterface
		if err := n.Get("basic_greeter.clientpool", &client); err != nil {
			return nil, err
		}
		
		return retries.New_GreeterService_RetrierClient(n.Context(), client)
	})
	
	b.Define("basic_greeter.clientpool", func(n *golang.Namespace) (any, error) {
		return pool.New_GreeterService_Pool(n), nil
	})
	
	b.Define("fancy_greeter.client.retrier", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var client ot.FancyGreeterService_OTClientWrapperInterface
		if err := n.Get("fancy_greeter.clientpool", &client); err != nil {
			return nil, err
		}
		
		return retries.New_FancyGreeterService_RetrierClient(n.Context(), client)
	})
	
	b.Define("fancy_greeter.clientpool", func(n *golang.Namespace) (any, error) {
		return pool.New_FancyGreeterService_Pool(n), nil
	})
	
}
