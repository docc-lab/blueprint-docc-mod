// Package otelsidecar provides a plugin to generate and include an OpenTelemetry sidecar instance in a Blueprint application.
//
// # Wiring Spec Usage
//
// To instantiate an OpenTelemetry sidecar container:
//
//	sidecar := otelsidecar.DeploySidecar(spec, "otel_sidecar", "jaeger")
//
// Or for Zipkin:
//
//	sidecar := otelsidecar.DeploySidecar(spec, "otel_sidecar", "zipkin")
//
// The returned sidecarName must be used as an argument to the `opentelemetry.Instrument(spec, serviceName, sidecar)` to ensure the spans generated by instrumented services are correctly exported to the instantiated server.
//
// # Artifacts Generated
//
//  1. The package provides an OpenTelemetry sidecar container that processes and forwards traces to either Jaeger or Zipkin.
//  2. Instantiates an [OtelSidecarTracer] instance for configuring the opentelemetry runtime libraries to export all generated traces to the sidecar.
//
// [OtelSidecarTracer]: https://github.com/Blueprint-uServices/blueprint/tree/main/runtime/plugins/opentelemetry
package otelsidecar

import (
	"github.com/blueprint-uservices/blueprint/blueprint/pkg/coreplugins/address"
	"github.com/blueprint-uservices/blueprint/blueprint/pkg/coreplugins/pointer"
	"github.com/blueprint-uservices/blueprint/blueprint/pkg/ir"
	"github.com/blueprint-uservices/blueprint/blueprint/pkg/wiring"
	"github.com/blueprint-uservices/blueprint/plugins/tracecoordinator"
)

// DeploySidecar can be used by the wiring spec to add and instantiate an OpenTelemetry sidecar docker container named `sidecarName` that uses the latest OpenTelemetry collector container
// and the clients needed by the generated application to communicate with the server.
//
// The returned sidecarName must be used as an argument to the opentelemetry.Instrument(spec, serviceName, `sidecarName`) to ensure the spans generated by instrumented services are correctly exported to the instantiated server.
//
// The collectorType parameter specifies whether the sidecar should forward traces to Jaeger or Zipkin.
//
// # Wiring Spec Usage
//
//	otelsidecar.DeploySidecar(spec, "otel_sidecar", "jaeger")
//
// Or for Zipkin:
//
//	otelsidecar.DeploySidecar(spec, "otel_sidecar", "zipkin")
func DeploySidecar(spec wiring.WiringSpec, sidecarName string, collectorType string) string {
	// The nodes that we are defining
	sidecarAddr := sidecarName + ".addr"
	sidecarCtr := sidecarName + ".ctr"
	sidecarClient := sidecarName + ".client"

	// Define the OpenTelemetry sidecar container
	spec.Define(sidecarCtr, &OtelSidecarContainer{}, func(ns wiring.Namespace) (ir.IRNode, error) {
		sidecar, err := newOtelSidecarContainer(sidecarCtr, collectorType)
		if err != nil {
			return nil, err
		}

		err = address.Bind[*OtelSidecarContainer](ns, sidecarAddr, sidecar, &sidecar.BindAddr)
		return sidecar, err
	})

	// Create a pointer to the OpenTelemetry sidecar container
	ptr := pointer.CreatePointer[*OtelSidecarClient](spec, sidecarName, sidecarCtr)

	// Define the address that points to the OpenTelemetry sidecar container
	address.Define[*OtelSidecarContainer](spec, sidecarAddr, sidecarCtr)

	// Add the address to the pointer
	ptr.AddAddrModifier(spec, sidecarAddr)

	// Define the OpenTelemetry sidecar client and add it to the client side of the pointer
	clientNext := ptr.AddSrcModifier(spec, sidecarClient)
	spec.Define(sidecarClient, &OtelSidecarClient{}, func(ns wiring.Namespace) (ir.IRNode, error) {
		addr, err := address.Dial[*OtelSidecarContainer](ns, clientNext)
		if err != nil {
			return nil, err
		}

		// Get the coordinator
		var coordinator *tracecoordinator.TraceCoordinator
		err = ns.Get("coordinator", &coordinator)
		if err != nil {
			return nil, err
		}

		return newOtelSidecarClient(sidecarClient, addr.Dial, coordinator, collectorType)
	})

	// Return the pointer; anybody who wants to access the OpenTelemetry sidecar instance should do so through the pointer
	return sidecarName
}

// WithPort sets the port for the OpenTelemetry sidecar.
func WithPort(port int) func(*OtelSidecarContainer) {
	return func(sidecar *OtelSidecarContainer) {
		sidecar.BindAddr.Port = port
	}
}

// WithImage sets the Docker image for the OpenTelemetry sidecar.
func WithImage(image string) func(*OtelSidecarContainer) {
	return func(sidecar *OtelSidecarContainer) {
		sidecar.Image = image
	}
}
